<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Proyect.APILocationContainer">
            <summary>
            Contenedor de la instncia de la api de localizacion.
            </summary>
        </member>
        <member name="P:Proyect.APILocationContainer.Instance">
            <summary>
            Obtiene la instancia de la instancia del contenedor de la api.
            </summary>
            <value>_instance</value>
        </member>
        <member name="P:Proyect.APILocationContainer.APIdeLocalizacion">
            <summary>
            Obtiene la instancia de la api de localizacion.
            </summary>
            <value>this.client</value>
        </member>
        <member name="T:Proyect.AppLogic">
            <summary>
            Clase singleton para guardar los datos de la Aplicacion.
            </summary>
        </member>
        <member name="P:Proyect.AppLogic.Companies">
            <summary>
            Obtiene las companias que estan registradas.
            </summary>
            <value>companies.</value>
        </member>
        <member name="P:Proyect.AppLogic.Entrepreneurs">
            <summary>
            Obtiene los emprendedores que estan registrados.
            </summary>
            <value>entrepreneurs.</value>
        </member>
        <member name="P:Proyect.AppLogic.Rubros">
            <summary>
            Obtiene los rubros habilitados.
            </summary>
            <value>validRubros.</value>
        </member>
        <member name="P:Proyect.AppLogic.Qualifications">
            <summary>
            Obtiene la lista de habilitaciones registradas.
            </summary>
            <value>validQualifications.</value>
        </member>
        <member name="P:Proyect.AppLogic.Classifications">
            <summary>
            Obtiene la lista de clasificaciones/categorias registradas para los productos.
            </summary>
            <value>validClasification.</value>
        </member>
        <member name="P:Proyect.AppLogic.Instance">
            <summary>
            Obtiene la instancia de AppLogic.
            </summary>
            <value>_instance.</value>
        </member>
        <member name="M:Proyect.AppLogic.RegisterEntrepreneurs(System.String,System.String,Proyect.Rubro,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Emprendedor"/>.
            </summary>
            <param name="name">El nombre del emprendedor.</param>
            <param name="ubication">La ubicacion del emprendedor.</param>
            <param name="rubro">El rubro del emprendedor.</param>
            <param name="habilitaciones">Las habilitaciones que tiene el emprendedor.</param>
            <param name="especializaciones">Las especializaciones que tiene el emprendedor.</param>//  
        </member>
        <member name="M:Proyect.AppLogic.ValidRubrosMessage">
            <summary>
            Metodo que retorna un mensaje con los rubros habilitados.
            </summary>
            <returns>Los rubros habilitados.</returns>
        </member>
        <member name="M:Proyect.AppLogic.validQualificationsMessage">
            <summary>
            Metodo que retorna un mensaje con las Habilitaciones permitidas.
            </summary>
            <returns>Habilitaciones permitidas.</returns>
        </member>
        <member name="M:Proyect.AppLogic.RemoveKeyWords(Proyect.Company,Proyect.IOffer,System.String)">
            <summary>
            Remueve palabras clave de la oferta de una compania.
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="keyWord">La palabra clave.</param>
        </member>
        <member name="M:Proyect.AppLogic.AddKeyWords(Proyect.Company,Proyect.IOffer,System.String)">
            <summary>
            Agrega las palabras clave de una oferta.
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="keyWord">La palabra clave.</param>
        </member>
        <member name="M:Proyect.AppLogic.RemoveOffer(Proyect.Company,Proyect.IOffer)">
            <summary>
            Remueve la oferta de una compania.
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
        </member>
        <member name="M:Proyect.AppLogic.RemoveQualification(Proyect.Company,Proyect.IOffer,Proyect.Qualifications)">
            <summary>
            Remueve las habilitaciones de una compania. 
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="qualification">La habilitacion.</param>
        </member>
        <member name="M:Proyect.AppLogic.AddQualification(Proyect.Company,Proyect.IOffer,Proyect.Qualifications)">
            <summary>
            Agrega habilitaciones a una oferta.
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="qualification">La habilitacion.</param>
        </member>
        <member name="M:Proyect.AppLogic.PublicConstantOffer(Proyect.Company,Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Publica una constante oferta de la compania que se le ingresa.
            </summary>
            <param name="company">La compania.</param>
            <param name="tipo">La clasificacion.</param>
            <param name="quantity">La cantidad.</param>
            <param name="cost">El precio.</param>
            <param name="ubication">La ubicacion.</param>
            <param name="qualifications">Las hablitaciones.</param>
            <param name="keyWords">La palabra clave.</param>
        </member>
        <member name="M:Proyect.AppLogic.PublicNonConstantOffer(Proyect.Company,Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Publica una oferta no constnte de la compania que se le ingresa.
            </summary>
            <param name="company">La compania.</param>
            <param name="tipo">La clasificacion.</param>
            <param name="quantity">La cantidad.</param>
            <param name="cost">El precio.</param>
            <param name="ubication">La ubicacion.</param>
            <param name="qualifications">Las hablitaciones.</param>
            <param name="keyWords">La palabra clave.</param>
            <returns>mensaje de confirmacion</returns>
        </member>
        <member name="M:Proyect.AppLogic.SearchOfferByType(System.String)">
            <summary>
            Metodo que se encarga de buscar las ofertas por tipo.
            </summary>
            <param name="word">Tipo de oferta.</param>
            <returns>Un ArrayList con todas las ofertas que sean de ese tipo.</returns>
        </member>
        <member name="M:Proyect.AppLogic.SearchOfferByUbication(System.String)">
            <summary>
            Metodo que se encarga de buscar las ofertas por ubicacion.
            </summary>
            <param name="word">Ubicacion de la oferta.</param>
            <returns>Un ArrayList con todas las ofertas en la ubicacion dada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.AccepOffer(Proyect.Emprendedor,Proyect.IOffer)">
            <summary>
            Metodo para aceptar una oferta.
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <param name="offer">Oferta a aceptar.</param>
        </member>
        <member name="M:Proyect.AppLogic.ObteinOfferDistance(Proyect.Emprendedor,Proyect.IOffer)">
            <summary>
            Metodo que permite obtener la distancia entre un emprendedor y un producto.
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <param name="offer">La Oferta.</param>
        </member>
        <member name="M:Proyect.AppLogic.ObteinOfferMap(Proyect.IOffer)">
            <summary>
            Metodo que obtiene el mapa de la ubicacion de un emprendedor.
            </summary>
            <param name="offer">Oferta que se quiere buscar.</param>
            <returns>Un mapa de la ubicacion del emprendedor.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetConstantMaterials">
            <summary>
            Metodo que devuelve un string con la lista de materiales constantes.
            </summary>
            <returns>Un string con aquellos materiales que son recuerrentes.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetOffersAccepted(Proyect.Company)">
            <summary>
            Obtiene un string con la indicando si sus ofertas fueron o no fueron aceptadas, en caso de que si, indica ademas la fecha de cuando fueron aceptadas.
            </summary>
            <param name="company">La compania.</param>
            <returns>Un string con las ofertas que fueron aceptadas.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetOffersAccepted(Proyect.Emprendedor)">
            <summary>
            Obtiene las ofertas aceptadas por el emprendedor, junto con la fecha de cuando las acepto.
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <returns>Un string con las ofertas que fueron aceptadas.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetPeriodTimeOffersAccepted(Proyect.Company,System.Int32)">
            <summary>
            Obtiene la cantidad de ofertas que fueron aceptadas en un periodo de tiempo establecido por el usuario.
            </summary>
            <param name="company">Compania.</param>
            <param name="periodTime">Periodo de tiempo establecido por el usuario.</param>
            <returns></returns>
        </member>
        <member name="M:Proyect.AppLogic.GetPeriodTimeOffersAccepted(Proyect.Emprendedor,System.Int32)">
            <summary>
            Obtiene la cantidad de ofertas que fueron aceptadas en un periodo de tiempo establecido por el usuario.
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <param name="periodTime">Periodo de tiempo establecido por el usuario.</param>
            <returns></returns>
        </member>
        <member name="T:Proyect.Classification">
            <summary>
            Esta clase representa una clasificacion para un producto.
            </summary>
        </member>
        <member name="P:Proyect.Classification.Category">
            <summary>
            Obtiene el valor de una clasificacion para un Producto.
            </summary>
            <value>this.category</value>
        </member>
        <member name="M:Proyect.Classification.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Classification"/>.
            </summary>
            <param name="category">Categoria de clasificación.</param>
        </member>
        <member name="T:Proyect.Company">
            <summary>
            Esta clase representa la compania y hereda de user (cumple con el principio ISP, porque no depende de tipos que no usa, ya que utiliza todos los metodos y propiedades de user).
            </summary>
        </member>
        <member name="F:Proyect.Company.offers">
            <summary>
            Lista de ofertas de la compania.
            </summary>
        </member>
        <member name="M:Proyect.Company.#ctor(System.String,System.String,Proyect.Rubro)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Company"/>.
            </summary>
            <param name="name">Nombre compania.</param>
            <param name="ubication">Ubicacion de la compania.</param>
            <param name="rubro">Rubro de la compania.</param>
        </member>
        <member name="P:Proyect.Company.OffersPublished">
            <summary>
            Metodo que retorna una lista con las ofertas publicadas por la empresa.
            </summary>
            <value>this.offers</value>
        </member>
        <member name="M:Proyect.Company.PublicConstantOffer(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Crea una instancia de una oferta constante y se la agrega a la lisat de ofertas de la compania.
            </summary>
            <param name="tipo"></param>
            <param name="quantity"></param>
            <param name="cost"></param>
            <param name="ubication"></param>
            <param name="qualifications"></param>
            <param name="keyWords"></param>
        </member>
        <member name="M:Proyect.Company.PublicNonConstantOffer(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Crea una instacion de una oferta no constante y se la agrega a la lista de ofertas de la compania
            </summary>
            <param name="tipo"></param>
            <param name="quantity"></param>
            <param name="cost"></param>
            <param name="ubication"></param>
            <param name="qualifications"></param>
            <param name="keyWords"></param>
        </member>
        <member name="M:Proyect.Company.RemoveOffer(Proyect.IOffer)">
            <summary>
            Remueve ofertas.
            </summary>
            <param name="offer">Oferta.</param>
        </member>
        <member name="M:Proyect.Company.GetOffersAccepted">
            <summary>
            Obtiene un string con todas las ofertas que fueron o no fueron aceptadas por emprendedores(por expert le asignamos esta responsabilidad).
            </summary>
            <returns>Las ofertas aceptadas.</returns>
        </member>
        <member name="M:Proyect.Company.GetPeriodTimeOffersAccepted(System.Int32)">
            <summary>
            Obtiene la cantidad de ofertas que publico la compania, que fueron aceptadas.
            </summary>
            <param name="periodTime">Periodo de tiempo.</param>
            <returns>Las ofertas aceptadas en un periodo de tiempo.</returns>
        </member>
        <member name="M:Proyect.Company.RemoveKeyWords(Proyect.IOffer,System.String)">
            <summary>
            Remueve palabras clave de una oferta.
            </summary>
            <param name="offer">La oferta.</param>
            <param name="keyWord">La palabra clave de la oferta.</param>
        </member>
        <member name="M:Proyect.Company.AddKeyWords(Proyect.IOffer,System.String)">
            <summary>
            Agrega palabras clave a una oferta.
            </summary>
            <param name="offer">La oferta.</param>
            <param name="keyWord">La palabra clave de la oferta.</param>
        </member>
        <member name="M:Proyect.Company.AddQualification(Proyect.IOffer,Proyect.Qualifications)">
            <summary>
            Agrega habilitaciones a la oferta.
            </summary>
            <param name="offer">La oferta.</param>
            <param name="qualification">La habilitaciones de la oferta.</param>
        </member>
        <member name="M:Proyect.Company.RemoveQualification(Proyect.IOffer,Proyect.Qualifications)">
            <summary>
            Remueve la habilitacion de una oferta.
            </summary>
            <param name="offer">La oferta.</param>
            <param name="qualification">La habilitacion de la oferta.</param>
        </member>
        <member name="T:Proyect.ConstantOffer">
            <summary>
            Representa las ofertas constantes de las companias.
            </summary>
        </member>
        <member name="M:Proyect.ConstantOffer.#ctor(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.ConstantOffer"/>
            </summary>
            <param name="tipo"></param>
            <param name="quantity"></param>
            <param name="cost"></param>
            <param name="ubicacion"></param>
            <param name="qualifications"></param>
            <param name="keyWords"></param>
        </member>
        <member name="P:Proyect.ConstantOffer.Product">
            <summary>
            Obtiene el producto de una oferta.
            </summary>
            <value>this.product</value>
        </member>
        <member name="P:Proyect.ConstantOffer.Qualifications">
            <summary>
            Obtiene la lista de las habilitaciones de una oferta.
            </summary>
            <value>this.qualifications</value>
        </member>
        <member name="P:Proyect.ConstantOffer.KeyWords">
            <summary>
            Obtiene la lista de palbras clave de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.ConstantOffer.PurchesedData">
            <summary>
            Obtiene la informacion de el o los compardores de esta oferta constante.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.ConstantOffer.GetPurchesedData">
            <summary>
            Obtiene la informacion de compra de la oferta (por patron expert).
            </summary>
            <returns>Devuelve un string con la informacion de compra.</returns>
        </member>
        <member name="M:Proyect.ConstantOffer.GetPeriodTimeOffersAcceptedData(System.Int32)">
            <summary>
            Obtiene la informacion de compra del ultimo emprendedor que acepta la oferta.
            </summary>
            <param name="periodTime"></param>
            <returns>Mensaje con la infromacion de compra de la oferta, si la misma entra dentro del rango estipulado, en caso contrario, mensaje que indica dicha situacion.</returns>
        </member>
        <member name="M:Proyect.ConstantOffer.GetOfferBuyerTimeData(Proyect.Emprendedor)">
            <summary>
            Obtiene la fecha de compra del emprendedor ingresado (expert).
            </summary>
            <param name="emprendedor"></param>
            <returns> La fecha de compra del emprendedor ingresado</returns>
        </member>
        <member name="M:Proyect.ConstantOffer.PutBuyer(Proyect.Emprendedor)">
            <summary>
            Agrega un nuevo comprador a la lista de compradores de esta oferta constante.
            </summary>
            <param name="emprendedor"></param>
        </member>
        <member name="T:Proyect.Emprendedor">
            <summary>
            Esta clase representa un Emprendedor. 
            </summary>
        </member>
        <member name="M:Proyect.Emprendedor.#ctor(System.String,System.String,Proyect.Rubro,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Emprendedor"/>
            </summary>
            <param name="name">Nombre del emprendedor.</param>
            <param name="ubication">Ubicacion del emprendedor.</param>
            <param name="rubro">Rubro del emprendedor.</param>
            <param name="qualifications">Hablitaciones del emprendedor.</param>
            <param name="specializations">Especializaciones del emprendedor.</param>
        </member>
        <member name="P:Proyect.Emprendedor.Qualifications">
            <summary>
            Propiedad get y set de las habilitaciones.
            </summary>
            <value>this.qualifications</value>
        </member>
        <member name="P:Proyect.Emprendedor.Specializations">
            <summary>
            Propiedad Specializations.
            </summary>
            <value>this.specializations</value>
        </member>
        <member name="P:Proyect.Emprendedor.PurchasedOffers">
            <summary>
            Obtiene la lista de ofertas ofertas aceptadas por el emprendedor.
            </summary>
            <value>this.purchasedOffer</value>
        </member>
        <member name="M:Proyect.Emprendedor.AddPurchasedOffer(Proyect.IOffer)">
            <summary>
            Metodo para agregar una oferta a la lista de ofertas que el emprendedor acepto.
            </summary>
            <param name="offer"></param>
        </member>
        <member name="M:Proyect.Emprendedor.GetOffersAccepted">
            <summary>
            Obtiene un string indicando las ofertas que fueron aceptadas por el por el emprendedor, junto con algunos datos.
            </summary>
            <returns>message</returns>
        </member>
        <member name="M:Proyect.Emprendedor.GetPeriodTimeOffersAccepted(System.Int32)">
            <summary>
            Obtiene la cantidad de ofertas que fueron aceptadas en un periodo de tiempo.
            </summary>
            <param name="periodTime">Periodo de tiempo.</param>
            <returns>message</returns>
        </member>
        <member name="T:Proyect.EmptyUserBuilderException">
            <summary>
            Excepcion para cuando el usurio ingresa un dato vacio cuando se registra
            </summary>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor">
            <summary>
            Constructor vacio
            </summary>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor(System.String)">
            <summary>
            Constructor con mensaje.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor(System.String,System.Exception)">
            <summary>
            Construtor con mensaje y excepcion encadenada.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <returns></returns>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor con atributo serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Proyect.IOffer">
            <summary>
            Interfaz para las ofertas de una compania.
            </summary>
        </member>
        <member name="P:Proyect.IOffer.Product">
            <summary>
            Obtiene el producto de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.IOffer.Qualifications">
            <summary>
            Obtiene las habilitaciones de la oferta.
            </summary>
            <value>qualifications</value>
        </member>
        <member name="P:Proyect.IOffer.KeyWords">
            <summary>
            Obtiene la lista de palabras clave de una oferta.
            </summary>
            <value>keyWords</value>
        </member>
        <member name="M:Proyect.IOffer.GetPurchesedData">
            <summary>
            Obtiene la informacion de compra de la oferta.
            </summary>
            <returns>mensaje con la infromacion de compra de todas sus ofertas.</returns>
        </member>
        <member name="M:Proyect.IOffer.GetPeriodTimeOffersAcceptedData(System.Int32)">
            <summary>
            Obtien todas las ofertas que le fueron aceptadas en un periodo de tiempo.
            </summary>
            <param name="periodTime"></param>
            <returns>mensaje con la informacion de compra de sus ofertas</returns>
        </member>
        <member name="M:Proyect.IOffer.GetOfferBuyerTimeData(Proyect.Emprendedor)">
            <summary>
            Obtiene la fecha en la que el imprendedor ingresado acepto la oferta.
            </summary>
            <param name="emprendedor"></param>
        </member>
        <member name="M:Proyect.IOffer.PutBuyer(Proyect.Emprendedor)">
            <summary>
            Le asigna el emprendedor y la fecha de compra a la oferta, una vez es comprada.
            </summary>
            <param name="emprendedor"></param>
        </member>
        <member name="T:Proyect.MessageProcesor">
            <summary>
            Clase que procesa los mensajes de telegram (en este caso va a procesar los mensajes de consola para probra la logica).
            </summary>
        </member>
        <member name="T:Proyect.NonConstantOffer">
            <summary>
            Esta clase representa las ofertas constantes de las companias..
            </summary>
        </member>
        <member name="M:Proyect.NonConstantOffer.#ctor(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.NonConstantOffer"/>
            </summary>
            <param name="tipo"></param>
            <param name="quantity"></param>
            <param name="cost"></param>
            <param name="ubicacion"></param>
            <param name="qualifications"></param>
            <param name="keyWords"></param>
        </member>
        <member name="P:Proyect.NonConstantOffer.Product">
            <summary>
            Obtiene el producto de una oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.NonConstantOffer.Qualifications">
            <summary>
            Obtiene la lista de las habilitaciones de una oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.NonConstantOffer.KeyWords">
            <summary>
            Obtiene la lista de palbras clave de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.NonConstantOffer.PurchesedData">
            <summary>
            Obtiene la informacion de el o los compardores de esta oferta constante.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.NonConstantOffer.GetPurchesedData">
            <summary>
            Obtiene la informacion de compra de la oferta (por patron expert).
            </summary>
            <returns>Un string con la informacion de quien lo compro.</returns>
        </member>
        <member name="M:Proyect.NonConstantOffer.GetPeriodTimeOffersAcceptedData(System.Int32)">
            <summary>
            Obtiene la informacion de compra de la oferta (expert).
            </summary>
            <param name="periodTime"></param>
            <returns>si la oferta se compro antes de la fecha estipulada, devuelve la iformacion de compra, en caso contrario, devuelve un striing indicando dicha situacion</returns>
        </member>
        <member name="M:Proyect.NonConstantOffer.GetOfferBuyerTimeData(Proyect.Emprendedor)">
            <summary>
            Obtiene la fecha de compra del emprendedor ingresado.
            </summary>
            <param name="emprendedor"></param>
            <returns>retorna la fecha de cmpra de la oferta</returns>
        </member>
        <member name="M:Proyect.NonConstantOffer.PutBuyer(Proyect.Emprendedor)">
            <summary>
            Coloca el emprendedor y la fecha de compra, en la informacion de compra.
            </summary>
            <param name="emprendedor"></param>
        </member>
        <member name="T:Proyect.OfferSearch">
            <summary>
            Clase que se encarga de buscar las ofertas por los distintos metodos establecidos.
            </summary>
        </member>
        <member name="P:Proyect.OfferSearch.Instance">
            <summary>
            Obtiene la instancia de OfferSearch.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByKeywords(System.String)">
            <summary>
            Busca las ofertas con la palabra clave que se le pasa.
            </summary>
            <param name="word">Palabras claves de oferta.</param>
            <returns>una lista con las offertas</returns>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByUbication(System.String)">
            <summary>
            Busca ofertas por ubicacion.
            </summary>
            <param name="ubication">Ubicacion de oferta.</param>
            <returns>una lista con las offertas</returns>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByType(System.String)">
            <summary>
            Busca ofertas por el tipo.
            </summary>
            <param name="type">Tipo de oferta.</param>
            <returns>una lista con las offertas</returns>
        </member>
        <member name="M:Proyect.OfferSearch.GetOffersMessages(Proyect.IOffer,Proyect.Company)">
            <summary>
            Obtiene la informacion de un oferta en fomra de mensaje.
            </summary>
            <param name="offer"></param>
            <param name="company"></param>
            <returns>La infromacion de la oferta.</returns>
        </member>
        <member name="T:Proyect.ProductOffer">
            <summary>
            Representa el producto de una oferta (Esta en una relacion de composicion con la clase Offer, siendo product la clase compuesta).
            </summary>
        </member>
        <member name="P:Proyect.ProductOffer.Classification">
            <summary>
            Obtiene un obtiene una instancia de clasificacion valida para un producto.
            </summary>
        </member>
        <member name="P:Proyect.ProductOffer.Quantity">
            <summary>
            Determina la cantidad de unidades de un producto.
            </summary>
        </member>
        <member name="P:Proyect.ProductOffer.Price">
            <summary>
            Determina el precio por unidad de producto.
            </summary>
        </member>
        <member name="P:Proyect.ProductOffer.Ubication">
            <summary>
            Determina la ubicacion de un producto.
            </summary>
        </member>
        <member name="M:Proyect.ProductOffer.#ctor(Proyect.Classification,System.Double,System.Double,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.ProductOffer"/>
            </summary>
            <param name="classification">Clasificacion del producto.</param>
            <param name="quantity">Cantidad del producto.</param>
            <param name="price">Precio del producto.</param>
            <param name="ubication">Ubicacion del producto.</param>
        </member>
        <member name="T:Proyect.PurchaseData">
            <summary>
            Clase para guardar la fecha y quien compró las ofertas.
            </summary>
        </member>
        <member name="P:Proyect.PurchaseData.Buyer">
            <summary>
            Metodo get del comprador.
            </summary>
        </member>
        <member name="P:Proyect.PurchaseData.PurchaseDate">
            <summary>
            Metodo get de la fecha de compra.
            </summary>
        </member>
        <member name="M:Proyect.PurchaseData.#ctor(Proyect.Emprendedor)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.PurchaseData"/>
            </summary>
            <param name="buyer"></param>
        </member>
        <member name="T:Proyect.Qualifications">
            <summary>
            Clase que representa las habilitaciones de una oferta o emprendedor.
            </summary>
        </member>
        <member name="P:Proyect.Qualifications.QualificationName">
            <summary>
            Propiedad del nombre de la habilitacion.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.Qualifications.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Qualifications"/>
            </summary>
            <param name="qualificationName">Nombre de las habilitaciones.</param>
        </member>
        <member name="T:Proyect.Rubro">
            <summary>
            Clase que representa el rubro de una compania o emprendedor.
            </summary>
        </member>
        <member name="P:Proyect.Rubro.RubroName">
            <summary>
            Propierty del nombre del rubro.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.Rubro.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Rubro"/>
            </summary>
            <param name="rubroName">Nombre del rubro.</param>
        </member>
        <member name="T:Proyect.User">
            <summary>
            Superclase user de Emprendedor y Company (quienes estan en una relaciontaxonomica con esta clase).
            </summary>
        </member>
        <member name="F:Proyect.User.name">
            <summary>
            Nombre del usuario,sea una compania o emprendedor.
            </summary>
        </member>
        <member name="F:Proyect.User.ubication">
            <summary>
            Ubicacion del usiario
            </summary>
        </member>
        <member name="F:Proyect.User.rubro">
            <summary>
            El rubro al que pertnece el usuario.
            </summary>
        </member>
        <member name="M:Proyect.User.#ctor(System.String,System.String,Proyect.Rubro)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.User"/>
            </summary>
            <param name="name">Nombre del usuario.</param>
            <param name="ubication">Ubicacion del usuario.</param>
            <param name="rubro">Rubro del usuario.</param>
        </member>
        <member name="P:Proyect.User.Name">
            <summary>
            Propiedad get y set del atributo del nombre.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.User.Ubication">
            <summary>
            Propiedad get y set del atributo de la ubicacion.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.User.Rubro">
            <summary>
            Propiedad get y set del atributo del rubro.
            </summary>
            <value></value>
        </member>
        <member name="T:LocationApi.Distance">
            <summary>
            Representa la distancia entre las coordenas o las direcciones de origen y destino retornada en los métodos
            <see cref="M:LocationApi.LocationApiClient.GetDistance(LocationApi.Location,LocationApi.Location)"/> o
            <see cref="M:LocationApi.LocationApiClient.GetDistance(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:LocationApi.Distance.Found">
            <summary>
            Indica si se encontraron o no las coordenas o las direcciones de origen y destino.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:LocationApi.Distance.TravelDistance">
            <summary>
            La distancia entre las coordenadas o las direcciones de origen y destino.
            </summary>
            <value>La distancia en metros.</value>
        </member>
        <member name="P:LocationApi.Distance.TravelDuration">
            <summary>
            El tiempo que se demora en llegar de las coordenadas o de las direcciones de origen a las de destino.
            </summary>
            <value>El tiempo que se demora en minutos.</value>
        </member>
        <member name="T:LocationApi.Location">
            <summary>
            Representa las coordenadas y otros datos de la ubicación de una dirección retornada en el método
            <see cref="M:LocationApi.LocationApiClient.GetLocation(System.String,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:LocationApi.Location.Found">
            <summary>
            Indica si se encontró o no la dirección. En ese caso son válidos los demás valores. En caso contrario los
            demás valores son indeterminados.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:LocationApi.Location.AddresLine">
            <summary>
            La dirección: calle y número, ruta y kilómetro, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738.</value>
        </member>
        <member name="P:LocationApi.Location.CountryRegion">
            <summary>
            El país.
            </summary>
            <value>Por ejemplo, Uruguay</value>
        </member>
        <member name="P:LocationApi.Location.FormattedAddress">
            <summary>
            La dirección completa, incluyendo ciudad, código postal, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738, Montevideo, 11200, Uruguay.</value>
        </member>
        <member name="P:LocationApi.Location.Locality">
            <summary>
            La localidad o ciudad.
            </summary>
            <value>Por ejemplo, Montevideo</value>
        </member>
        <member name="P:LocationApi.Location.PostalCode">
            <summary>
            El código postal.
            </summary>
            <value>Por ejemplo, 11200</value>
        </member>
        <member name="P:LocationApi.Location.Latitude">
            <summary>
            La latitud de la dirección.
            </summary>
            <value>El valor de la latitud en formato decimal.</value>
        </member>
        <member name="P:LocationApi.Location.Longitude">
            <summary>
            La longitud de la dirección.
            </summary>
            <value>El valor de la longitud en formato decimal.</value>
        </member>
        <member name="T:LocationApi.LocationApiClient">
            <summary>
            API de Localizacion
            </summary>
        </member>
        <member name="M:LocationApi.LocationApiClient.GetLocation(System.String,System.String,System.String,System.String)">
            <summary>
            Obtiene las coordenadas de una dirección.
            </summary>
            <param name="address">La dirección.</param>
            <param name="city">La ciudad. Es opcional. El valor predeterminado es Montevideo.</param>
            <param name="department">El departamento, estado, provincia, etc. Es opcional. El valor predeterminado es `ontevideo.</param>
            <param name="country">El país. Es opcional. El valor predeterminado es Uruguay.</param>
            <returns>Las coordenadas de la dirección.</returns>
        </member>
        <member name="M:LocationApi.LocationApiClient.GetDistance(LocationApi.Location,LocationApi.Location)">
            <summary>
            Obtiene la distancia entre dos coordenadas.
            </summary>
            <param name="from">La coordenada de origen.</param>
            <param name="to">La coordenada de destino.</param>
            <returns>La distancia entre las dos coordenadas.</returns>
        </member>
        <member name="M:LocationApi.LocationApiClient.GetDistance(System.String,System.String)">
            <summary>
            Obtiene la distancia entre dos direcciones.
            </summary>
            <param name="from">La dirección de origen.</param>
            <param name="to">La dirección de destino.</param>
            <returns>La distancia entre las dos direcciones.</returns>
        </member>
        <member name="M:LocationApi.LocationApiClient.DownloadMap(System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Descarga una mapa de una coordenada.
            </summary>
            <param name="latitude">La latitud de la coordenada.</param>
            <param name="longitude">La longitud de la coordenada.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. El formato es PNG.</param>
            <param name="zoomLevel">El nivel de zoom del mapa entre 1 y 20. Es opcional. El valor predeterminado es
            15.</param>
        </member>
        <member name="M:LocationApi.LocationApiClient.DownloadRoute(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Un mapa con una ruta entre dos coordenadas.
            </summary>
            <param name="fromLatitude">La latitud de la coordenada de origen.</param>
            <param name="fromLongitude">La longitu de la coordenada de origen.</param>
            <param name="toLatitude">La latitud de la coordenada de destino.</param>
            <param name="toLongitude">La longitud de la coordenada de destino.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. Es formato es PNG.</param>
        </member>
    </members>
</doc>
