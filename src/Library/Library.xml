<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Proyect.AppLogic">
            <summary>
            Clase singleton para guardar los datos de la Aplicacion
            </summary>
        </member>
        <member name="P:Proyect.AppLogic.Companies">
            <summary>
            Obtiene las companias que estan registradas
            </summary>
            <value>companies</value>
        </member>
        <member name="P:Proyect.AppLogic.Entrepreneurs">
            <summary>
            Obtiene los emprendedores que estan registrados
            </summary>
            <value>entrepreneurs</value>
        </member>
        <member name="P:Proyect.AppLogic.Rubros">
            <summary>
            Obtiene los rubros habilitados
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.AppLogic.Qualifications">
            <summary>
            Obtiene la lista de habilitciones registradas
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.AppLogic.Instance">
            <summary>
            Obtiene la instancia de AppLogic
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.AppLogic.RegisterEntrepreneurs(System.String,System.String,Proyect.Rubro,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.Generic.List{Proyect.Qualifications})">
            <summary>
            Metodo que registra a un emprendedor
            </summary>
        </member>
        <member name="M:Proyect.AppLogic.ValidRubrosMessage">
            <summary>
            Metodo que retorna un mensaje con los rubros habilitaddos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Proyect.AppLogic.validQualificationsMessage">
            <summary>
            Metdo que retorna un mensaje con las Habilitaciones permitidas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Proyect.AppLogic.SearchOfferByKeyWords(System.String)">
            <summary>
            Metodo que se encarga de buscar las ofertas por palabras clave
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:Proyect.AppLogic.SearchOfferByType(System.String)">
            <summary>
            Metodo que se encarga de buscar las ofertas por tipo
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:Proyect.AppLogic.SearchOfferByUbication(System.String)">
            <summary>
            Metodo que se encarga de buscar las ofertas por ubicacion
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="T:Proyect.Classification">
            <summary>
            Es la clasificacion que va a tener cada producto
            </summary>
        </member>
        <member name="P:Proyect.Classification.Category">
            <summary>
            Devuelve el nombre de la clasificacion
            </summary>
            <value></value>
        </member>
        <member name="T:Proyect.Company">
            <summary>
            Esta clase representa la compania, 
            </summary>
        </member>
        <member name="F:Proyect.Company.offers">
            <summary>
            Lista de ofertas de la compania
            </summary>
        </member>
        <member name="M:Proyect.Company.#ctor(System.String,System.String,Proyect.Rubro)">
            <summary>
            Constructor de company
            </summary>
            <param name="name"></param>
            <param name="ubication"></param>
            <param name="rubro"></param>
        </member>
        <member name="M:Proyect.Company.PublicOffer">
            <summary>
            Publica una oferta,es decir,la crea y la guarda en su lista
            </summary>
        </member>
        <member name="T:Proyect.Emprendedor">
            <summary>
            Clase emprendedor.
            </summary>
        </member>
        <member name="M:Proyect.Emprendedor.#ctor(System.String,System.String,Proyect.Rubro,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.Generic.List{Proyect.Qualifications})">
            <summary>
            Constructor de emprendedor
            </summary>
            <param name="name"></param>
            <param name="ubication"></param>
            <param name="rubro"></param>
            <param name="qualifications"></param>
            <param name="specializations"></param>
            <returns></returns>
        </member>
        <member name="P:Proyect.Emprendedor.Qualifications">
            <summary>
            Propiedad get y set de las habilitaciones
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.Emprendedor.Specializations">
            <summary>
            Propiedad Specializations
            </summary>
            <value></value>
        </member>
        <member name="T:Proyect.MessageProcesor">
            <summary>
            Clase que procesa los mensajes de telegram (en este caso va a procesar los mensajes de consola para probra la logica)
            </summary>
        </member>
        <member name="M:Proyect.MessageProcesor.RegistEnterprenuer">
            <summary>
            Metodo que 
            </summary>
        </member>
        <member name="T:Proyect.Offer">
            <summary>
            Representa la oferta de una compania
            </summary>
        </member>
        <member name="M:Proyect.Offer.#ctor(System.Boolean,Proyect.Classification,System.Int32,System.Double,System.String,System.String,System.String)">
            <summary>
            Constructor de offer, el mismo, crea una instancia del producto
            </summary>
            <param name="ifConstant"></param>
            <param name="tipo"></param>
            <param name="quantity"></param>
            <param name="cost"></param>
            <param name="ubication"></param>
            <param name="qualifications"></param>
            <param name="keyWords"></param>
        </member>
        <member name="P:Proyect.Offer.Constant">
            <summary>
            Obtiene un valor que indica si la oferta es constante o no
            </summary>
            <value><c>true</c> si la oferta es constante, <c>false</c> en caso contrario.</value>
        </member>
        <member name="P:Proyect.Offer.Product">
            <summary>
            Obtiene el el producto de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.Offer.Qualifications">
            <summary>
            Obteien las cualificaciones/habilitaciones neceraias para aceptar la oferta, esto lo establce cada compania
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.Offer.KeyWords">
            <summary>
            Â´Obtiene el conjunto de palabras clave que se utilizan a la hora de buscar la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.Offer.Buyer">
            <summary>
            Obtiee el compardor de la oferta, quien la acepto luego de que la haya buscado
            </summary>
            <value><c>Emprendedor</c> si la oferta ya fue aceptada, lo que te dice tabien quien la acepto, <c>null</c> si no fue aceptada, por lo que se puede aceptar.</value>
        </member>
        <member name="T:Proyect.OfferSearch">
            <summary>
            Clase que se encarga de buscar las ofertas por los distintos metodos establecidos
            </summary>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByKeywords(System.String)">
            <summary>
            Busca las ofertas con la palabra clave que se le pasa
            </summary>
            <param name="words"></param>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByUbication(System.String)">
            <summary>
            Busca ofertas por ubicacion
            </summary>
            <param name="ubication"></param>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByType(System.String)">
            <summary>
            Busca ofertas por el tipo
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Proyect.ProductOffer">
            <summary>
            Representa el producto de una oferta
            </summary>
        </member>
        <member name="P:Proyect.ProductOffer.Classification">
            <summary>
            Obtiene un string que determina los tipos del producto.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.ProductOffer.Quantity">
            <summary>
            Determina la cantidad de unidades de un producto.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.ProductOffer.Price">
            <summary>
            Determina el precio por unidad de producto
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.ProductOffer.Ubication">
            <summary>
            Determina la ubicacion de un producto.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.ProductOffer.#ctor(Proyect.Classification,System.Double,System.Double,System.String)">
            <summary>
            Constructor de instancias de product.
            </summary>
            <param name="classification"></param>
            <param name="quantity"></param>
            <param name="price"></param>
            <param name="ubication"></param>
        </member>
        <member name="T:Proyect.Qualifications">
            <summary>
            Clase que representa las habilitaciones de una oferta o emprendedor
            </summary>
        </member>
        <member name="P:Proyect.Qualifications.QualificationName">
            <summary>
            Propierti delnombre de la habilitacion
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.Qualifications.#ctor(System.String)">
            <summary>
            Constructor de instancias de qualification
            </summary>
            <param name="qualificationName"></param>
        </member>
        <member name="T:Proyect.Rubro">
            <summary>
            Clase que representa el rubro de una compania o emprendedor
            </summary>
        </member>
        <member name="P:Proyect.Rubro.RubroName">
            <summary>
            Propierti delnombre del rubro
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.Rubro.#ctor(System.String)">
            <summary>
            Constructor de instancias de rubro
            </summary>
            <param name="rubroName"></param>
        </member>
        <member name="T:Proyect.User">
            <summary>
            Superclase entity
            </summary>
        </member>
        <member name="F:Proyect.User.name">
            <summary>
            Nombre del usuario,sea una compania o emprendedor
            </summary>
        </member>
        <member name="F:Proyect.User.ubication">
            <summary>
            Ubicacion del usiario
            </summary>
        </member>
        <member name="F:Proyect.User.rubro">
            <summary>
            El rubro al que pertnece el usuario
            </summary>
        </member>
        <member name="M:Proyect.User.#ctor(System.String,System.String,Proyect.Rubro)">
            <summary>
            Constructor de entity
            </summary>
            <param name="name"></param>
            <param name="ubication"></param>
            <param name="rubro"></param>
        </member>
        <member name="P:Proyect.User.Name">
            <summary>
            Propiedad get y set del atributo del nombre
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.User.Ubication">
            <summary>
            Propiedad get y set del atributo de la ubicacion
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.User.Rubro">
            <summary>
            Propiedad get y set del atributo del rubro
            </summary>
            <value></value>
        </member>
        <member name="T:LocationApi.Distance">
            <summary>
            Representa la distancia entre las coordenas o las direcciones de origen y destino retornada en los mÃ©todos
            <see cref="M:LocationApi.LocationApiClient.GetDistance(LocationApi.Location,LocationApi.Location)"/> o
            <see cref="M:LocationApi.LocationApiClient.GetDistance(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:LocationApi.Distance.Found">
            <summary>
            Indica si se encontraron o no las coordenas o las direcciones de origen y destino.
            </summary>
            <value>true si se encontrÃ³ la direcciÃ³n; false en caso contrario.</value>
        </member>
        <member name="P:LocationApi.Distance.TravelDistance">
            <summary>
            La distancia entre las coordenadas o las direcciones de origen y destino.
            </summary>
            <value>La distancia en metros.</value>
        </member>
        <member name="P:LocationApi.Distance.TravelDuration">
            <summary>
            El tiempo que se demora en llegar de las coordenadas o de las direcciones de origen a las de destino.
            </summary>
            <value>El tiempo que se demora en minutos.</value>
        </member>
        <member name="T:LocationApi.Location">
            <summary>
            Representa las coordenadas y otros datos de la ubicaciÃ³n de una direcciÃ³n retornada en el mÃ©todo
            <see cref="M:LocationApi.LocationApiClient.GetLocation(System.String,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:LocationApi.Location.Found">
            <summary>
            Indica si se encontrÃ³ o no la direcciÃ³n. En ese caso son vÃ¡lidos los demÃ¡s valores. En caso contrario los
            demÃ¡s valores son indeterminados.
            </summary>
            <value>true si se encontrÃ³ la direcciÃ³n; false en caso contrario.</value>
        </member>
        <member name="P:LocationApi.Location.AddresLine">
            <summary>
            La direcciÃ³n: calle y nÃºmero, ruta y kilÃ³metro, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738.</value>
        </member>
        <member name="P:LocationApi.Location.CountryRegion">
            <summary>
            El paÃ­s.
            </summary>
            <value>Por ejemplo, Uruguay</value>
        </member>
        <member name="P:LocationApi.Location.FormattedAddress">
            <summary>
            La direcciÃ³n completa, incluyendo ciudad, cÃ³digo postal, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738, Montevideo, 11200, Uruguay.</value>
        </member>
        <member name="P:LocationApi.Location.Locality">
            <summary>
            La localidad o ciudad.
            </summary>
            <value>Por ejemplo, Montevideo</value>
        </member>
        <member name="P:LocationApi.Location.PostalCode">
            <summary>
            El cÃ³digo postal.
            </summary>
            <value>Por ejemplo, 11200</value>
        </member>
        <member name="P:LocationApi.Location.Latitude">
            <summary>
            La latitud de la direcciÃ³n.
            </summary>
            <value>El valor de la latitud en formato decimal.</value>
        </member>
        <member name="P:LocationApi.Location.Longitude">
            <summary>
            La longitud de la direcciÃ³n.
            </summary>
            <value>El valor de la longitud en formato decimal.</value>
        </member>
        <member name="T:LocationApi.LocationApiClient">
            <summary>
            API de Localizacion
            </summary>
        </member>
        <member name="M:LocationApi.LocationApiClient.GetLocation(System.String,System.String,System.String,System.String)">
            <summary>
            Obtiene las coordenadas de una direcciÃ³n.
            </summary>
            <param name="address">La direcciÃ³n.</param>
            <param name="city">La ciudad. Es opcional. El valor predeterminado es Montevideo.</param>
            <param name="department">El departamento, estado, provincia, etc. Es opcional. El valor predeterminado es `ontevideo.</param>
            <param name="country">El paÃ­s. Es opcional. El valor predeterminado es Uruguay.</param>
            <returns>Las coordenadas de la direcciÃ³n.</returns>
        </member>
        <member name="M:LocationApi.LocationApiClient.GetDistance(LocationApi.Location,LocationApi.Location)">
            <summary>
            Obtiene la distancia entre dos coordenadas.
            </summary>
            <param name="from">La coordenada de origen.</param>
            <param name="to">La coordenada de destino.</param>
            <returns>La distancia entre las dos coordenadas.</returns>
        </member>
        <member name="M:LocationApi.LocationApiClient.GetDistance(System.String,System.String)">
            <summary>
            Obtiene la distancia entre dos direcciones.
            </summary>
            <param name="from">La direcciÃ³n de origen.</param>
            <param name="to">La direcciÃ³n de destino.</param>
            <returns>La distancia entre las dos direcciones.</returns>
        </member>
        <member name="M:LocationApi.LocationApiClient.DownloadMap(System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Descarga una mapa de una coordenada.
            </summary>
            <param name="latitude">La latitud de la coordenada.</param>
            <param name="longitude">La longitud de la coordenada.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. El formato es PNG.</param>
            <param name="zoomLevel">El nivel de zoom del mapa entre 1 y 20. Es opcional. El valor predeterminado es
            15.</param>
        </member>
        <member name="M:LocationApi.LocationApiClient.DownloadRoute(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Un mapa con una ruta entre dos coordenadas.
            </summary>
            <param name="fromLatitude">La latitud de la coordenada de origen.</param>
            <param name="fromLongitude">La longitu de la coordenada de origen.</param>
            <param name="toLatitude">La latitud de la coordenada de destino.</param>
            <param name="toLongitude">La longitud de la coordenada de destino.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. Es formato es PNG.</param>
        </member>
    </members>
</doc>
