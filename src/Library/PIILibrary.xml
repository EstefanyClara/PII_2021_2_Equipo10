<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PIILibrary</name>
    </assembly>
    <members>
        <member name="T:Proyect.Administrator">
            <summary>
            Esta clase administrador invita a los usuarios a registrarse.
            Clase singleton, solo una instancia de administrador.
            Esta clase contiene ademas, la lista de codigos para que una company se pueda registrar.
            Tambien contiene la lista de id de usuarios, que tienen poderio de administrador.
            Serializamos solo la lista de codigos, para asi mantener el encapsulamiento, ya que administrador solo deberia tener un constructor privado.
            </summary>
        </member>
        <member name="P:Proyect.Administrator.Instance">
            <summary>
            Obtiene la instancia de administrador.
            </summary>
            <value>La instacia unica de administrador.</value>
        </member>
        <member name="P:Proyect.Administrator.Tokens">
            <summary>
            Obtiene la lista de tokes que el administrador crea, y que se usan para registrar companias.
            </summary>
            <value>La lista de codigos.</value>
        </member>
        <member name="P:Proyect.Administrator.Admin_Id">
            <summary>
            Obteien la lista de id de aquellos que tienen el rol de administrador.
            </summary>
            <value>La lista de id de administradores.</value>
        </member>
        <member name="M:Proyect.Administrator.ConfirmCompanyRegistration(System.String,System.String,System.String,System.String,Proyect.Rubro,System.String)">
            <summary>
            Metodo que crea una compania si la misma ingreso un token correcto (Utiliza Creator).
            Tiene esta responsabilidad, ya que es la tiene la lista de tokes para validad (Por expert).
            </summary>
            <param name="companyToken">El codigo de regsitro.</param>
            <param name="name">El nombre de la compania.</param>
            <param name="ubication">La ubicacion de la compania.</param>
            <param name="rubro">El rubor de la compania.</param>
            <param name="user_Id">El id de usuario.</param>
            <param name="user_Contact">El mail de contacto de la compania.</param>
            <returns>La compania que si posee el codigo correcto, null en caso contrario.</returns>
        </member>
        <member name="M:Proyect.Administrator.Invite">
            <summary>
            Genera un codigo con el cual una compania se podra registrar (Por expert).
            </summary>
            <returns>Codigo con el cual una compania se podra registrar.</returns>
        </member>
        <member name="M:Proyect.Administrator.AddAdministrator(System.String,System.String)">
            <summary>
            Coloca el id de un usuario al la lista de id con rol de administrador (Por expert).
            </summary>
            <param name="confirmCode">El codigo de confirmacion.</param>
            <param name="user_Id">El id de usuario.</param>
        </member>
        <member name="M:Proyect.Administrator.IsAdministrator(System.String)">
            <summary>
            Procesa si el id de usuario ingresado, es un id de un administrador (Por expert).
            </summary>
            <param name="user_Id">El id de usuario.</param>
            <returns>True si es administrador, false en caso contrario.</returns>
        </member>
        <member name="M:Proyect.Administrator.ConvertToJson">
            <summary>
            Convierte a json la lista de codigos para que una compania se pueda registrar (Por expert).
            </summary>
            <returns>La lista de tokens serializada.</returns>
        </member>
        <member name="M:Proyect.Administrator.Deserialize">
            <summary>
            Deserializa la lista de codigos (Por expert).
            </summary>
        </member>
        <member name="T:Proyect.APILocationContainer">
            <summary>
            Contenedor de la instancia de la api de localizacion (clase singleton, solo hay una instancia).
            </summary>
        </member>
        <member name="P:Proyect.APILocationContainer.Instance">
            <summary>
            Obtiene la instancia de la instancia del contenedor de la api.
            </summary>
            <value>_instance</value>
        </member>
        <member name="P:Proyect.APILocationContainer.APIdeLocalizacion">
            <summary>
            Obtiene la instancia de la api de localizacion.
            </summary>
            <value>this.client</value>
        </member>
        <member name="T:Proyect.AppLogic">
            <summary>
            Clase singleton para guardar los datos de la Aplicacion.
            Solo hay una instancia de esta clase, y es la que colabora con todas las demas.
            Esta clase guarda las instancias tanto de campanias y de emprendedores, asi como de los rubros, clasificaciones, y habilitaciones (La usa de manera muy cercana).
            Todos lso comabios qu ese hagan a algun objeto, pasan por esta clase, esto permite que sea mas facilmente el utilizar la logica del programa, sin depender de los handlers.
            En la serializacion, solo serializamos la lista, para asi mantener el encapsulamiento, ya que la logica solo debria tener un constructor privado.
            </summary>
        </member>
        <member name="P:Proyect.AppLogic.Companies">
            <summary>
            Obtiene las companias que estan registradas.
            </summary>
            <value>companies.</value>
        </member>
        <member name="P:Proyect.AppLogic.Entrepreneurs">
            <summary>
            Obtiene los emprendedores que estan registrados.
            </summary>
            <value>entrepreneurs.</value>
        </member>
        <member name="P:Proyect.AppLogic.Rubros">
            <summary>
            Obtiene los rubros habilitados.
            </summary>
            <value>validRubros.</value>
        </member>
        <member name="P:Proyect.AppLogic.Qualifications">
            <summary>
            Obtiene la lista de habilitaciones registradas.
            </summary>
            <value>validQualifications.</value>
        </member>
        <member name="P:Proyect.AppLogic.Classifications">
            <summary>
            Obtiene la lista de clasificaciones/categorias registradas para los productos.
            </summary>
            <value>validClassification.</value>
        </member>
        <member name="M:Proyect.AppLogic.ConvertToJson(System.Collections.Generic.List{Proyect.Rubro})">
            <summary>
            Convierte a Json la lista de rubros (así cuando se quiera agregar uno nuevo, no hay que detener el programa).
            Este metodo lo posee AppLogic, porque es la que tiene la lista (es la experta en la informacion). 
            Este es un metodo polimorfismo.
            </summary>
            <param name="rubro">La lista de rubros antes de serializar.</param>
            <returns>La lisat de rubros serializada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.ConvertToJson(System.Collections.Generic.List{Proyect.Qualifications})">
            <summary>
            Convierte a Json la lista de habilitaciones (así cuando se quiera agregar una nueva, no hay que detener el programa).
            Este metodo lo posee AppLogic, porque es la que tiene la lista (es la experta en la informacion).
            Este es un metodo polimorfismo.
            </summary>
            <param name="habilitaciones">La lista de habilitaciones antes de serializarla.</param>
            <returns>La lista de habilitaciones serializada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.ConvertToJson(System.Collections.Generic.List{Proyect.Classification})">
            <summary>
            Convierte a Json la lista de clasificaciones (así cuando se quiera agregar una nueva, no hay que detener el programa).
            Este metodo lo posee AppLogic, porque es la que tiene la lista (es la experta en la informacion).
            Este es un metodo polimorfismo.
            </summary>
            <param name="clasificaciones">La lista de clasificaiones nates de serializar.</param>
            <returns>La lista de clasificaciones serializada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.ConvertToJson(System.Collections.Generic.IList{Proyect.Emprendedor})">
            <summary>
            Convierte a Json la lista de emprendedores (así cuando se detenga el programa, no se pierda la informacion).
            Este metodo lo posee AppLogic, porque es la que tiene la lista (es la experta en la informacion).
            Este es un metodo polimorfico. 
            </summary>
            <param name="emprendedores">La lisat de emprendedores antes de serializar.</param>
            <returns>La lista de emprendedores serializada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.ConvertToJson(System.Collections.Generic.IList{Proyect.Company})">
            <summary>
            Convierte a Json la lista de companias (así cuando se detenga el programa, no se pierda la informacion).
            Este metodo lo posee AppLogic, porque es la que tiene la lista (es la experta en la informacion).
            Este es un metodo polimorfico. 
            </summary>
            <param name="companies">La lisat de companias antes de serilizar.</param>
            <returns>La lista de companias serializada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.DeserializeRubros">
            <summary>
            Deserializa la listas de rubros del archivo json.
            AppLogic tiene la responsabilidad, porque es la que tiene la logica del programa y la que usa la lista (por expert).
            </summary>
            <returns>La lista de rubros deserializada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.DeserializeQualifications">
            <summary>
            Deserializa la lista de habilitaciones del archivo json.
            AppLogic tiene la responsabilidad, porque es la que tiene la logica del programa y la que usa la lista (por expert).
            </summary>
            <returns>La lista de habilitaciones deserializada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.DeserializeClasification">
            <summary>
            Deserializa la lista de clasificaciones del archivo json.
            AppLogic tiene la responsabilidad, porque es la que tiene la logica del programa y la que usa la lista (por expert).
            </summary>
            <returns>La lista de clasificaciones deserializada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.DeserializeEntrenprenuers">
            <summary>
            Deserializa la lista de emprendedores del archivo json.
            AppLogic tiene la responsabilidad, porque es la que tiene la logica del programa y la que usa la lista (por expert).
            </summary>
            <returns>La lisat de emprendedores deserializada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.DeserializeCompanies">
            <summary>
            Deserializa la listas de companias del archivo json.
            AppLogic tiene la responsabilidad, porque es la que tiene la logica del programa y la que usa la lista (por expert).
            </summary>
            <returns>La lista de emprendedores deserializada.</returns>
        </member>
        <member name="P:Proyect.AppLogic.Instance">
            <summary>
            Obtiene la instancia de AppLogic.
            </summary>
            <value>_instance.</value>
        </member>
        <member name="M:Proyect.AppLogic.AddAdministrator(System.String,System.String)">
            <summary>
            Registra a un id de usuario, como administrador.
            Le delega la responsabilidad a Administrator, la que tiene la lista donde se depositaran los id.
            </summary>
            <param name="user_id">El id del usuario.</param>
            <param name="confirmCode">El codigo de confirmacion (contraseña) para determinar si puede o no, ser administrador.</param>
            <returns>True si cumple con lo necesario para se administrador, false en caso contrario.</returns>
        </member>
        <member name="M:Proyect.AppLogic.Invite">
            <summary>
            Obtiene le codigo que un usuario usara si se quiere registrar como compania.
            Le delega la responsabilidad a Administrator (La que tiene la lista de todos los codigos, y la que los maneja).
            </summary>
            <returns>El codigo que usara una compnia para registrarse.</returns>
        </member>
        <member name="M:Proyect.AppLogic.RegisterEntrepreneurs(System.String,System.String,System.String,Proyect.Rubro,System.Collections.Generic.List{Proyect.Qualifications},System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Emprendedor"/>.
            Utiliza el patron creator.
            </summary>
            <param name="name">El nombre del emprendedor.</param>
            <param name="ubication">La ubicacion del emprendedor.</param>
            <param name="rubro">El rubro del emprendedor.</param>
            <param name="habilitaciones">Las habilitaciones que tiene el emprendedor.</param>
            <param name="especializaciones">Las especializaciones que tiene el emprendedor.</param>
            <param name="user_Id">Id que tiene el emprendedor.</param> 
            <param name="user_Contact">Contacto del emprendedor.</param> 
        </member>
        <member name="M:Proyect.AppLogic.RegistrarCompany(System.String,System.String,System.String,System.String,Proyect.Rubro,System.String)">
            <summary>
            Registra a una compania
            Le delaga la responsabilidad de crear la compania a Administrator, la que tiene que comprara el codigo necesario para la companias.
            Guarda a la compania en la lista de companias (Por expert).
            </summary>
            <param name="companyToken">El codigo que ingreso una compnai para registrase.</param>
            <param name="user_Id">El id de usuario.</param>
            <param name="name">El nombre de la compania.</param>
            <param name="ubication">La ubicacion de la compania.</param>
            <param name="rubro">El rubro al que pertenece la compañia.</param>
            <param name="user_Contact">Contacto de la compania.</param>
            <returns>Mensaje de confirmacion.</returns>
        </member>
        <member name="M:Proyect.AppLogic.RemoveKeyWords(Proyect.Company,Proyect.IOffer,System.Int32)">
            <summary>
            Remueve palabras clave de la oferta de una compania.
            Le delega la responsabilidad a company (La experta).
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="keyWordIndex">La palabra clave.</param>
        </member>
        <member name="M:Proyect.AppLogic.AddKeyWords(Proyect.Company,Proyect.IOffer,System.String)">
            <summary>
            Agrega las palabras clave de una oferta.
            Le delaga la responsabilidad a Company (La experta).
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="keyWord">La palabra clave.</param>
        </member>
        <member name="M:Proyect.AppLogic.RemoveOffer(Proyect.Company,System.Int32)">
            <summary>
            Remueve la oferta de una compania.
            Le delega la responsabilidad a company (La experta).
            </summary>
            <param name="company">La compania.</param>
            <param name="offerIndex">La oferta.</param>
        </member>
        <member name="M:Proyect.AppLogic.RemoveQualification(Proyect.Company,Proyect.IOffer,System.Int32)">
            <summary>
            Remueve las habilitaciones de una compania. 
            Le delega la responsabilidad a company (La experta).
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="qualificationIndex">La habilitacion.</param>
        </member>
        <member name="M:Proyect.AppLogic.AddQualification(Proyect.Company,Proyect.IOffer,Proyect.Qualifications)">
            <summary>
            Agrega habilitaciones a una oferta.
            Le delega la responsabilidad a company (La experta).
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="qualification">La habilitacion.</param>
        </member>
        <member name="M:Proyect.AppLogic.PublicConstantOffer(Proyect.Company,Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Publica una oferta constante de la compania que se le ingresa.
            ÑLe delaga la responsabilidad a company (Por patron creator).
            </summary>
            <param name="company">La compania.</param>
            <param name="tipo">La clasificacion.</param>
            <param name="quantity">La cantidad.</param>
            <param name="cost">El precio.</param>
            <param name="ubication">La ubicacion.</param>
            <param name="qualifications">Las hablitaciones.</param>
            <param name="keyWords">La palabra clave.</param>
        </member>
        <member name="M:Proyect.AppLogic.PublicNonConstantOffer(Proyect.Company,Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Publica una oferta no constante de la compania que se le ingresa.
            Le delega la responsabilidad a company (Por patron creator).
            </summary>
            <param name="company">La compania.</param>
            <param name="tipo">La clasificacion.</param>
            <param name="quantity">La cantidad.</param>
            <param name="cost">El precio.</param>
            <param name="ubication">La ubicacion.</param>
            <param name="qualifications">Las hablitaciones.</param>
            <param name="keyWords">La palabra clave.</param>
        </member>
        <member name="M:Proyect.AppLogic.SearchOfferByType(System.String)">
            <summary>
            Metodo que se encarga de buscar las ofertas por tipo.
            Le delega la responsabilidad a OfferSearch (Por SRP).
            </summary>
            <param name="word">Tipo de oferta.</param>
            <returns>Un Lista con todas las ofertas que sean de ese tipo.</returns>
        </member>
        <member name="M:Proyect.AppLogic.SearchOfferByUbication(System.String)">
            <summary>
            Metodo que se encarga de buscar las ofertas por ubicacion.
            Le delega la responsabilidad a OfferSearch (Por SRP).
            </summary>
            <param name="word">Ubicacion de la oferta.</param>
            <returns>Un Lista con todas las ofertas en la ubicacion dada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.SearchOfferByKeywords(System.String)">
            <summary>
            Metodo que se encarga de buscar las ofertas por palabra clave.
            Le delega la responsabilidad a OfferSearch (Por SRP).
            </summary>
            <param name="keyWord">La palabra clave que deben tener las ofertas.</param>
            <returns>Un Lista con todas las ofertas que tenga esa palabra clave.</returns>
        </member>
        <member name="M:Proyect.AppLogic.AccepOffer(Proyect.Emprendedor,Proyect.IOffer)">
            <summary>
            Metodo para aceptar una oferta.
            Le delega la responsabilidad de determinar si la oferta puede o no ser aceptada por el emprendedor, a Offer, la que tiene todos los datos para saber si es posible la accion (Por expert).
            Le delega la responsabilidad de agregar una oferta, a Emprendedor, la que que tiene la lista de ofertas que acepto (Por expert).
            AppLogic tiene la responsabilidad de enviar el mensaje de confirmacion, porque es la que conoce todos los datos necesarios para determinar un resultado (Por expert).        
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <param name="offer">Oferta a aceptar.</param>
            <returns>Mensaje de confirmacion si la oferta fue o no aceptada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.ObteinOfferDistance(Proyect.Emprendedor,Proyect.IOffer)">
            <summary>
            Metodo que permite obtener la distancia entre un emprendedor y un producto.
            Utiliza la LocationApi, que esta en la clase singlestion LocationApiCointener.
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <param name="offer">La Oferta.</param>
            <returns>El string que marca la distancia.</returns>
        </member>
        <member name="M:Proyect.AppLogic.ObteinOfferMap(Proyect.IOffer)">
            <summary>
            Metodo que obtiene el mapa de la ubicacion de una oferta.
            Utiliza la LocationApi, que esta en la clase singlestion LocationApiCointener.
            </summary>
            <param name="offer">Oferta que se quiere buscar.</param>
        </member>
        <member name="M:Proyect.AppLogic.GetConstantMaterials">
            <summary>
            Metodo que devuelve un string con la lista de materiales constantes.
            Por expert tiene esta responsabilidad.
            </summary>
            <returns>Un diccionario con los materiales recurentes, y su respectiva conatdad de oferta.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetOffersAccepted(Proyect.Company)">
            <summary>
            Obtiene una lista de las ofertas que fueron acepatadas de la compania que se le ingresa.
            Es una operacion polimorfica.
            Le delega la responsabilidad a Company (La experta).
            </summary>
            <param name="company">La compania.</param>
            <returns>La lista con las ofertas que fueron aceptadas.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetOffersAccepted(Proyect.Emprendedor)">
            <summary>
            Obtiene una lista de las ofertas que fueron acepatadas por el emprendedor que se le ingresa.
            Le delega la responsabilidad a emprendedor, la experta.
            Es una operacion polimorfica.
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <returns>La luita con las ofertas aceptadas.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetOffersAccepted(Proyect.Company,System.Int32)">
            <summary>
            Obtiene la cantidad de ofertas que fueron aceptadas en un periodo de tiempo establecido por el usuario.
            Le delega la responsabilidad a company (La experta).
            Es una operacion polimorfica.
            </summary>
            <param name="company">Compania.</param>
            <param name="periodTime">Periodo de tiempo establecido por el usuario.</param>
            <returns></returns>
        </member>
        <member name="M:Proyect.AppLogic.GetOffersAccepted(Proyect.Emprendedor,System.Int32)">
            <summary>
            Obtiene la cantidad de ofertas que fueron aceptadas en un periodo de tiempo establecido por el usuario.
            Le delega la responsabilidad a emprendedor (La experta).
            Es una operacion polimorfica.
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <param name="periodTime">Periodo de tiempo establecido por el usuario.</param>
            <returns>La lista con las ofertas.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetCompany(System.String)">
            <summary>
            Obtiene la compania mediente el id de usuario ingresado.
            Como AppLogic tiene la lista de copanias, tiene esta responsabilidad (Es la experta).
            </summary>
            <param name="user_Id">El id de usuario.</param>
            <returns>La compania que tiene ese id.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetEmprendedor(System.String)">
            <summary>
            Obtiene el emprendedor mediante el ingreso de un id de usuario.
            Como AppLogic tiene la lista de emprendedores, tiene esta responsabilidad (Es la experta).
            </summary>
            <param name="user_Id">El id de usuario.</param>
            <returns>El emprendedor que tiene ese id.</returns>
        </member>
        <member name="T:Proyect.Classification">
            <summary>
            Esta clase representa una clasificacion para un producto.
            </summary>
        </member>
        <member name="P:Proyect.Classification.Category">
            <summary>
            Obtiene una clasificacion para un Producto.
            </summary>
            <value>La clasificacion.</value>
        </member>
        <member name="M:Proyect.Classification.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Classification"/>.
            </summary>
            <param name="category">Categoria de clasificación.</param>
        </member>
        <member name="T:Proyect.Company">
            <summary>
            Esta clase representa la compania y hereda de user (cumple con el principio ISP, porque no depende de tipos que no usa, ya que utiliza todos los metodos y propiedades de user).
            </summary>
        </member>
        <member name="M:Proyect.Company.#ctor(System.String,System.String,System.String,Proyect.Rubro,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Company"/>.
            </summary>
            <param name="name">Nombre compania.</param>
            <param name="ubication">Ubicacion de la compania.</param>
            <param name="rubro">Rubro de la compania.</param>
            <param name="user_Id">Identificacion de la compania.</param>
            <param name="user_Contact">Contacto de la compania.</param>
        </member>
        <member name="P:Proyect.Company.OffersPublished">
            <summary>
            Metodo que retorna una lista con las ofertas publicadas por la empresa.
            </summary>
            <value>Las ofertas.</value>
        </member>
        <member name="M:Proyect.Company.PublicConstantOffer(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Crea una instancia de una oferta constante y se la agrega a la lista de ofertas de la compania.
            Se Asigno esta responsabilidad por expert (La clase company es la que conoce la lista de las ofertas que publica).
            Tambien, se asigno esta responsabilidad siguiendo el patron creator, company contiene objetos IOffer.
            </summary>
            <param name="tipo">El tipo del producto a ofertas.</param>
            <param name="quantity">La cantidad del producto a ofertas.</param>
            <param name="cost">El costo del producto a ofertar.</param>
            <param name="ubication">La ubicacion del producto a ofertar.</param>
            <param name="qualifications">La habilitaciones de la oferta.</param>
            <param name="keyWords">Las palabras clave asociadas a la oferta.</param>
        </member>
        <member name="M:Proyect.Company.PublicNonConstantOffer(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Crea una instacia de una oferta no constante y se la agrega a la lista de ofertas de la compania.
            Se Asigno esta responsabilidad por expert (La clase company es la que conoce la lista de ls ofertas que publica).
            Tambien, se asigno esta responsabilidad siguiendo el patron creator, company contiene objetos IOffer.
            </summary>
            /// <param name="tipo">El tipo del producto a ofertas.</param>
            <param name="quantity">La cantidad del producto a ofertas.</param>
            <param name="cost">El costo del producto a ofertar.</param>
            <param name="ubication">La ubicacion del producto a ofertar.</param>
            <param name="qualifications">La habiliatciones de la oferta.</param>
            <param name="keyWords">Las palabras clave asociadas a la oferta.</param>
        </member>
        <member name="M:Proyect.Company.GetOffersAccepted">
            <summary>
            Obtiene una lista con todas las ofertas que fueron o no fueron aceptadas por emprendedores(por expert le asignamos esta responsabilidad).
            Es una operacion polimorfica.
            </summary>
            <returns>Las ofertas aceptadas.</returns>
        </member>
        <member name="M:Proyect.Company.GetOffersAccepted(System.Int32)">
            <summary>
            Obtiene la cantidad de ofertas que publico la compania, que fueron aceptadas en un periodo de tiempo (Por expert).
            Es una operacion polimorfica.
            </summary>
            <param name="periodTime">Periodo de tiempo.</param>
            <returns>Las ofertas aceptadas en un periodo de tiempo.</returns>
        </member>
        <member name="M:Proyect.Company.RemoveKeyWords(Proyect.IOffer,System.Int32)">
            <summary>
            Remueve palabras clave de una oferta (Por expert).
            </summary>
            <param name="offer">La oferta.</param>
            <param name="keyWordIndex">La palabra clave de la oferta.</param>
        </member>
        <member name="M:Proyect.Company.AddKeyWords(Proyect.IOffer,System.String)">
            <summary>
            Agrega palabras clave a una oferta (Por expert).
            </summary>
            <param name="offer">La oferta.</param>
            <param name="keyWord">La palabra clave de la oferta.</param>
        </member>
        <member name="M:Proyect.Company.AddQualification(Proyect.IOffer,Proyect.Qualifications)">
            <summary>
            Agrega habilitaciones a la oferta (Por expert).
            </summary>
            <param name="offer">La oferta.</param>
            <param name="qualification">La habilitaciones de la oferta.</param>
        </member>
        <member name="M:Proyect.Company.RemoveQualification(Proyect.IOffer,System.Int32)">
            <summary>
            Remueve la habilitacion de una oferta (Por expert).
            </summary>
            <param name="offer">La oferta.</param>
            <param name="qualificationIndex">La habilitacion de la oferta.</param>
        </member>
        <member name="T:Proyect.ConstantOffer">
            <summary>
            Representa las ofertas constantes de las companias (Es del tipo IOffer, a quien usa, por lo que cumple con ISP).
            </summary>
        </member>
        <member name="M:Proyect.ConstantOffer.#ctor(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.ConstantOffer"/>
            </summary>
            <param name="tipo">El tipo del producto a ofertas.</param>
            <param name="quantity">La cantidad del producto a ofertas.</param>
            <param name="cost">El costo del producto a ofertar.</param>
            <param name="ubicacion">La ubicacion del producto a ofertar.</param>
            <param name="qualifications">La habilitaciones de la oferta.</param>
            <param name="keyWords">Las palabras clave asociadas a la oferta.</param>
        </member>
        <member name="M:Proyect.ConstantOffer.#ctor">
            <summary>
            Constructor utilizado en la serializacion.
            </summary>
        </member>
        <member name="P:Proyect.ConstantOffer.Product">
            <summary>
            Obtiene el producto de una oferta.
            </summary>
            <value>El producto.</value>
        </member>
        <member name="P:Proyect.ConstantOffer.Qualifications">
            <summary>
            Obtiene la lista de las habilitaciones de una oferta.
            </summary>
            <value>Las habilitaciones.</value>
        </member>
        <member name="P:Proyect.ConstantOffer.KeyWords">
            <summary>
            Obtiene la lista de palbras clave de la oferta.
            </summary>
            <value>La palabras clave.</value>
        </member>
        <member name="P:Proyect.ConstantOffer.PurchesedData">
            <summary>
            Obtiene la informacion de el o los compardores de esta oferta constante (Informacion de compra).
            </summary>
            <value>La lista de infromacion de compra.</value>
        </member>
        <member name="P:Proyect.ConstantOffer.DatePublished">
            <summary>
            Obtiene la fecha de publicacion de la oferta.
            </summary>
            <value>La fecha de publicacion.</value>
        </member>
        <member name="M:Proyect.ConstantOffer.GetPeriodTimeOffersAcceptedData(System.Int32)">
            <summary>
            Obtiene la informacion de compra de todos los emprendedores que aceptaron la oferta en el tiempo estipulado(Patron expert).
            Esta operacion es polimorfica.
            </summary>
            <param name="periodTime">El periodo de tiempo.</param>
            <returns>Mensaje con la infromacion de compra de la oferta, si la misma entra dentro del rango estipulado, en caso contrario, mensaje que indica dicha situacion.</returns>
        </member>
        <member name="M:Proyect.ConstantOffer.GetPeriodTimeOffersAcceptedData(System.Int32,Proyect.Emprendedor)">
            <summary>
            Obtiene la informacion de compra del emprendedor especificado en el tiempo ingresado (Por expert).
            Esta operacion es polimorfica.
            </summary>
            <param name="periodTime">El periodo de tiempo.</param>
            <param name="emprendedor">Emprendedor.</param>
            <returns></returns>
        </member>
        <member name="M:Proyect.ConstantOffer.GetEntrepreneursPurchaseData(Proyect.Emprendedor)">
            <summary>
            Obtiene la informacion de compra del emprendedor especificado (Por expert).
            </summary>
            <param name="emprendedor">El emprendedor.</param>
            <returns>La lista con la informacion de compra.</returns>
        </member>
        <member name="M:Proyect.ConstantOffer.PutBuyer(Proyect.Emprendedor)">
            <summary>
            Agrega un nuevo comprador a la lista de compradores de esta oferta constante (Se utiliza creator, y expert).
            </summary>
            <param name="emprendedor">El emprendedor.</param>
            <returns>Mensaje de confirmacion.</returns>
        </member>
        <member name="T:Proyect.Emprendedor">
            <summary>
            Esta clase representa un Emprendedor, hereda de user (Tienen relacion taxonomica, cumple con el ISP). 
            </summary>
        </member>
        <member name="M:Proyect.Emprendedor.#ctor(System.String,System.String,System.String,Proyect.Rubro,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Emprendedor"/>
            </summary>
            <param name="name">Nombre del emprendedor.</param>
            <param name="ubication">Ubicacion del emprendedor.</param>
            <param name="rubro">Rubro del emprendedor.</param>
            <param name="qualifications">Habilitaciones del emprendedor.</param>
            <param name="specializations">Especializaciones del emprendedor.</param>
            <param name="user_Id">Identificacion del emprendedor.</param>
            <param name="user_Contact">Contacto del emprendedor.</param>
        </member>
        <member name="P:Proyect.Emprendedor.Qualifications">
            <summary>
            Propiedad get y set de las habilitaciones.
            </summary>
            <value>Las habilitaciones.</value>
        </member>
        <member name="P:Proyect.Emprendedor.Specializations">
            <summary>
            Propiedad de get y set de las especializaciones.
            </summary>
            <value>La especializaciones.</value>
        </member>
        <member name="P:Proyect.Emprendedor.PurchasedOffers">
            <summary>
            Obtiene la lista de ofertas ofertas aceptadas por el emprendedor.
            </summary>
            <value>tLa lista de ofertas que el emprendedor acepto.</value>
        </member>
        <member name="M:Proyect.Emprendedor.AddPurchasedOffer(Proyect.IOffer)">
            <summary>
            Metodo para agregar una oferta a la lista de ofertas que el emprendedor acepto (Por expert).
            </summary>
            <param name="offer">La oferta a agregar.</param>
        </member>
        <member name="M:Proyect.Emprendedor.GetOffersAccepted(System.Int32)">
            <summary>
            Obtiene una lista de ofertas que fueron aceptadas en un periodo de tiempo (Por Expert).
            </summary>
            <param name="periodTime">Periodo de tiempo.</param>
            <returns>La lista de ofertas.</returns>
        </member>
        <member name="T:Proyect.EmptyUserBuilderException">
            <summary>
            Excepcion para cuando el usurio ingresa un dato vacio cuando se registra
            </summary>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor">
            <summary>
            Constructor vacio
            </summary>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor(System.String)">
            <summary>
            Constructor con mensaje.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor con mensaje y excepcion encadenada.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <returns></returns>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor con atributo serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Proyect.AdministratorHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            Hereda de base Hanlder.
            </summary>
        </member>
        <member name="M:Proyect.AdministratorHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.AdministratorHandler"/>. Esta clase procesa el mensaje de un uasurio para tener el rol de administrador.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.AdministratorHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/nuevoadministrador" y  "/invitar", retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.AutorizationHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            Hereda de base handler.
            </summary>
        </member>
        <member name="M:Proyect.AutorizationHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.AutorizationHandler"/>. Esta clase procesa si la persona que envio el mensaje esta registrada.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.AutorizationHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/registrar" y retorna flase; retorna true en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            </summary>
        </member>
        <member name="P:Proyect.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:Proyect.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:Proyect.BaseHandler.#ctor(Proyect.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.BaseHandler.#ctor(System.String[],Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.BaseHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="responder">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:Proyect.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes.
            </summary>
        </member>
        <member name="M:Proyect.BaseHandler.CanHandle(Proyect.IMessage)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:Proyect.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:Proyect.BaseHandler.Handle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Proyect.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes.
            
            </summary>
        </member>
        <member name="T:Proyect.CancelHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            Hereda de base handler.
            </summary>
        </member>
        <member name="M:Proyect.CancelHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.CancelHandler"/>. Esta clase procesa el mensaje /back y pone a un usurio al estado inicial.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.CancelHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/back" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.CompanyMyOfferHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            Hereda de base hanlder.
            </summary>
        </member>
        <member name="M:Proyect.CompanyMyOfferHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.CompanyMyOfferHandler"/>. Esta clase permite administrar todas las ofertas de una compania.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.CompanyMyOfferHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/misofertas", "/removeroferta", "/removerkeyword", "/removerhabilitacion", "/agregarkeyword", "/agregarhabilitacion" y "/oferta" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.DataUserContainer">
            <summary>
            Clase contenedora del historia de mensajes que un usuario manda.
            Esta es una clase singleton, solo hay una instancia de ella.
            </summary>
        </member>
        <member name="P:Proyect.DataUserContainer.Instance">
            <summary>
            Obtiene la instancia de la clase.
            </summary>
            <value>La instancia de la clase.</value>
        </member>
        <member name="P:Proyect.DataUserContainer.UserDataHistory">
            <summary>
            Obtiene el diccionario donde se guardan los mensajes de un usuario.
            </summary>
            <value>Diccionario con clave el chat ID de un usuario, y lista de la histroia de usuario.</value>
        </member>
        <member name="P:Proyect.DataUserContainer.UserOfferDataSelection">
            <summary>
            Obtiene el diccionario donde se guardan las ofertas que selecciono el usuario mientras usaba la aplicacion.
            </summary>
            <value>Diccionario donde se guardan las ofertas del usurio.</value>
        </member>
        <member name="T:Proyect.GetConstantMaterialsHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            Hereda de base hanlder.
            </summary>
        </member>
        <member name="M:Proyect.GetConstantMaterialsHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.GetConstantMaterialsHandler"/>. Esta clase procesa el mensaje "/materialesconstantes" y envia un mensaje con informacion sobre la cantidad de ofertas que tiene cada material constante.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.GetConstantMaterialsHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/materialesconstantes" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.IHandler">
            <summary>
            Interfaz para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta interfaz define un atributo para definir el próximo "handler" y una una operación para
            recibir el mensaje y pasarlo al siguiente "handler" en caso que el mensaje no sea procesado. La responsabilidad de
            decidir si el mensaje se procesa o no, y de procesarlo, se realiza en las clases que implementan esta interfaz.
            La interfaz se crea en función del principio de inversión de dependencias, para que los clientes de la cadena de
            responsabilidad, que pueden ser concretos, no dependan de una clase "handler" que potencialmente es abstracta.
            </summary>
        </member>
        <member name="P:Proyect.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Proyect.IHandler.Handle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Proyect.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Proyect.MeHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            Hereda de base hanlder.
            </summary>
        </member>
        <member name="M:Proyect.MeHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.MeHandler"/>. Esta clase procesa el mensaej "/me" y envia un mensaje con la informacion del usuario correspondiente.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.MeHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/me" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.PublicOfferHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            </summary>
        </member>
        <member name="M:Proyect.PublicOfferHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.PublicOfferHandler"/>. Esta clase procesa el mensaje public, para publicar una oferta.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.PublicOfferHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje /public" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.PurchasedOfferHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            Hereda de Base Handler.
            </summary>
        </member>
        <member name="M:Proyect.PurchasedOfferHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.PurchasedOfferHandler"/>. Esta clase procesa si la persona que envio el mensaje esta registrada.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.PurchasedOfferHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/misofertasaceptadas" y "/oferta" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.RegisterHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            </summary>
        </member>
        <member name="M:Proyect.RegisterHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.RegisterHandler"/>. Esta clase procesa el mensaje "/Registrar" de un usuario y todos los datos necesarios para registrarlo.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.RegisterHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/registrar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.SearchOfferHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            Hereda de base hanlders.
            </summary>
        </member>
        <member name="M:Proyect.SearchOfferHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.SearchOfferHandler"/>. Esta clase procesa el mensaje /buscar, para buscar una oferta de diferentes formas.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.SearchOfferHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/buscar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.StartHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility.
            Hereda de base hanlders.
            </summary>
        </member>
        <member name="M:Proyect.StartHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.StartHandler"/>. Esta clase procesa el mensaje "/start" y muestras las funcionalidades bases del programa.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyect.StartHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/start" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.IMessage">
            <summary>
            Interfaz para los mensajes, que se utilizara para el patron adapter.
            </summary>
        </member>
        <member name="P:Proyect.IMessage.Id">
            <summary>
            Id del usuario.
            </summary>
            <value>El id.</value>
        </member>
        <member name="P:Proyect.IMessage.Text">
            <summary>
            El mensaje.
            </summary>
        </member>
        <member name="P:Proyect.IMessage.MsgId">
            <summary>
            Id del chat.
            </summary>
            <value>El chat id.</value>
        </member>
        <member name="M:Proyect.IMessage.SendProfileImage(System.String,System.String)">
            <summary>
            Envia una imagen a un usuario.
            Esto es paar segrui con el patroon adapter, y tener el encapsulamiento lo mejor posible.
            </summary>
            <param name="mensaje">El mesaje que contendra la imegan.</param>
            <param name="direccion">La direcion del chat a que se le enciara.</param>
            <returns></returns>
        </member>
        <member name="T:Proyect.IOffer">
            <summary>
            Interfaz para las ofertas de una compania, la utilizaron ambos tipos de ofertas, y si se quieren agregar mas, tambien habran de utilizar esta interfaz.
            </summary>
        </member>
        <member name="P:Proyect.IOffer.Product">
            <summary>
            Propiedad get y set del producto de la oferta.
            </summary>
            <value>El producto.</value>
        </member>
        <member name="P:Proyect.IOffer.Qualifications">
            <summary>
            Propiedad get y set de las habilitaciones de la oferta.
            </summary>
            <value>Las habilitaciones.</value>
        </member>
        <member name="P:Proyect.IOffer.KeyWords">
            <summary>
            Property de la lista de palabras clave de una oferta.
            </summary>
            <value>keyWords.</value>
        </member>
        <member name="P:Proyect.IOffer.DatePublished">
            <summary>
            Property de la fecha de publicacion de la oferta.
            </summary>
            <value>DateTime</value>
        </member>
        <member name="P:Proyect.IOffer.PurchesedData">
            <summary>
            La informacion de compra de la oferta.
            </summary>
            <value>La lisat con la informacion de compra de la oferta.</value>
        </member>
        <member name="M:Proyect.IOffer.GetPeriodTimeOffersAcceptedData(System.Int32)">
            <summary>
            Obtiene toda la informacion de compra (compardor y fecha de compra), del peridodo de tiempo indicado.
            Por expert le asignamos esta responsabilidad (Es la que tiene la lista de informacion de compra).
            </summary>
            <param name="periodTime"></param>
            <returns>La lista con la infromacion de compra.</returns>
        </member>
        <member name="M:Proyect.IOffer.GetPeriodTimeOffersAcceptedData(System.Int32,Proyect.Emprendedor)">
            <summary>
            Obtiene la infromacion de compra del emprendedor indicado, en el perido de tiempo establecido.
            Por expert le asignamos esta responsabilidad (Es la que tiene la lista de informacion de compra).
            </summary>
            <param name="periodTime">El perido de tiempo.</param>
            <param name="emprendedor">El emprendedor.</param>
            <returns>La lista con la inforamcion de compra.</returns>
        </member>
        <member name="M:Proyect.IOffer.GetEntrepreneursPurchaseData(Proyect.Emprendedor)">
            <summary>
            Obtiene todos los datos de compra de la oferta del emprendedor indicado.
            Por expert le asignamos esta responsabilidad (Es la que tiene la lista de informacion de compra).
            </summary>
            <param name="emprendedor">El emprendedor.</param>
            <returns>La informacion de compra.</returns>
        </member>
        <member name="M:Proyect.IOffer.PutBuyer(Proyect.Emprendedor)">
            <summary>
            Le asigna el emprendedor y la fecha de compra a la oferta, una vez es comprada (La informacion de compra).
            Por expert le asignamos esta responsabilidad (Es la que tiene la lista de informacion de compra).
            </summary>
            <param name="emprendedor">El emprendedor.</param>
            <returns>Mensaje de confirmacion.</returns>
        </member>
        <member name="T:Proyect.MessageTest">
            <summary>
            Clase mensaje utilizada para los test.
            </summary>
        </member>
        <member name="M:Proyect.MessageTest.#ctor(System.String,System.Int32)">
            <summary>
            Constructor de la clase message para el text.
            </summary>
            <param name="ID"></param>
            <param name="MSGID"></param>
        </member>
        <member name="P:Proyect.MessageTest.Id">
            <summary>
            Property get y set del id.
            </summary>
            <value>El id del usurio.</value>
        </member>
        <member name="P:Proyect.MessageTest.MsgId">
            <summary>
            Property del chat id de cada usuario.
            </summary>
            <value>El chat id del usurio.</value>
        </member>
        <member name="P:Proyect.MessageTest.Text">
            <summary>
            El texto que envia el usaurio.
            </summary>
            <value>El texto.</value>
        </member>
        <member name="M:Proyect.MessageTest.SendProfileImage(System.String,System.String)">
            <summary>
            Metodo que envia una imagen a un usuario.
            </summary>
            <param name="mensaje">El mensaje que se mostrara con la imagen.</param>
            <param name="direccion">La dirrecion de donde se sacara la imagen.</param>
            <returns></returns>
        </member>
        <member name="T:Proyect.NonConstantOffer">
            <summary>
            Esta clase representa las ofertas no constantes de las companias (Cumple con ISP).
            </summary>
        </member>
        <member name="M:Proyect.NonConstantOffer.#ctor(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.NonConstantOffer"/>
            </summary>
            <param name="tipo">El tipo del producto a ofertas.</param>
            <param name="quantity">La cantidad del producto a ofertas.</param>
            <param name="cost">El costo del producto a ofertar.</param>
            <param name="ubicacion">La ubicacion del producto a ofertar.</param>
            <param name="qualifications">La habilitaciones de la oferta.</param>
            <param name="keyWords">Las palabras clave asociadas a la oferta.</param>
        </member>
        <member name="M:Proyect.NonConstantOffer.#ctor">
            <summary>
            Constructor utilizado en la serialization.
            </summary>
        </member>
        <member name="P:Proyect.NonConstantOffer.Product">
            <summary>
            Obtiene el producto de una oferta.
            </summary>
            <value>Producto.</value>
        </member>
        <member name="P:Proyect.NonConstantOffer.Qualifications">
            <summary>
            Obtiene la lista de las habilitaciones de una oferta.
            </summary>
            <value>Lista de habilitaciones.</value>
        </member>
        <member name="P:Proyect.NonConstantOffer.KeyWords">
            <summary>
            Obtiene la lista de palbras clave de la oferta.
            </summary>
            <value>Lista de palabras calve.</value>
        </member>
        <member name="P:Proyect.NonConstantOffer.PurchesedData">
            <summary>
            Obtiene la informacion de el o los compardores de esta oferta constante.
            </summary>
            <value>Lista de informacion de compra.</value>
        </member>
        <member name="P:Proyect.NonConstantOffer.DatePublished">
            <summary>
            Obtiene la fecha de publicacion de la oferta.
            </summary>
            <value>Fecha de compra.</value>
        </member>
        <member name="M:Proyect.NonConstantOffer.GetPeriodTimeOffersAcceptedData(System.Int32)">
            <summary>
            Obtiene la informacion de compra de la oferta, en el tiempo indicado (Por expert).
            Esta operacion es polimorfica.
            </summary>
            <param name="periodTime">El periodo de tiempo.</param>
            <returns>Si la oferta se compro antes de la fecha estipulada, devuelve la informacion de compra, en caso contrario, devuelve un string indicando dicha situacion</returns>
        </member>
        <member name="M:Proyect.NonConstantOffer.GetPeriodTimeOffersAcceptedData(System.Int32,Proyect.Emprendedor)">
            <summary>
            Obtiene la informacion de compra del emprendedor especificado, en el tiempo especificado (Por expert).
            Esta operacion es polimorfica.
            </summary>
            <param name="periodTime">El periodo de tiempo.</param>
            <param name="emprendedor">El emprendedor.</param>
            <returns>La lisat de informacion de compra.</returns>
        </member>
        <member name="M:Proyect.NonConstantOffer.PutBuyer(Proyect.Emprendedor)">
            <summary>
            Coloca el emprendedor y la fecha de compra, en la informacion de compra (Por expert).
            </summary>
            <param name="emprendedor">El emprendedor.</param>
            <returns>Mensaje de confirmacion.</returns>
        </member>
        <member name="M:Proyect.NonConstantOffer.GetEntrepreneursPurchaseData(Proyect.Emprendedor)">
            <summary>
            Obtiene la infromacion de compra de un emprendedor en esepcifico (Por expert).
            </summary>
            <param name="emprendedor">El emprendedor.</param>
            <returns>La lista de informacion de compra.</returns>
        </member>
        <member name="T:Proyect.OfferSearch">
            <summary>
            Clase que se encarga de buscar las ofertas por los distintos metodos establecidos (Por SRP).
            Es una clase singleton (solo hay una instancia de la misma).
            </summary>
        </member>
        <member name="P:Proyect.OfferSearch.Instance">
            <summary>
            Obtiene la instancia de OfferSearch.
            </summary>
            <value>La instancia de offersearch.</value>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByKeywords(System.String)">
            <summary>
            Busca las ofertas con la palabra clave que se le pasa (Por srp).
            </summary>
            <param name="word">Palabras claves de oferta.</param>
            <returns>Una lista con las ofertas.</returns>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByUbication(System.String)">
            <summary>
            Busca ofertas por ubicacion (Por srp).
            </summary>
            <param name="ubication">Ubicacion de oferta.</param>
            <returns>Una lista con las ofertas.</returns>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByType(System.String)">
            <summary>
            Busca ofertas por el tipo (Por srp).
            </summary>
            <param name="type">Tipo de oferta.</param>
            <returns>Una lista con las ofertas.</returns>
        </member>
        <member name="T:Proyect.IJsonConvertible">
            <summary>
            Define el tipo que tienen los objetos que pueden ser serializados en y deserializados desde texto en formato
            Json.
            </summary>
        </member>
        <member name="M:Proyect.IJsonConvertible.ConvertToJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:Proyect.MyReferenceHandler">
            <summary>
            Handler utilizado para la seralizacion.
            </summary>
        </member>
        <member name="P:Proyect.MyReferenceHandler.Instance">
            <summary>
            La instancia del handler de referencia.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.MyReferenceHandler.#ctor">
            <summary>
            Constructor del handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Proyect.MyReferenceHandler.CreateResolver">
            <summary>
            Resolvedor de referencias.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Proyect.MyReferenceHandler.Reset">
            <summary>
            Reseteador del handler.
            </summary>
        </member>
        <member name="T:Proyect.ProductOffer">
            <summary>
            Representa el producto de una oferta (Esta en una relacion de composicion con la clase Offer, siendo product la clase compuesta).
            </summary>
        </member>
        <member name="P:Proyect.ProductOffer.Classification">
            <summary>
            Obtiene un obtiene una instancia de clasificacion valida para un producto.
            </summary>
            <value>La clasificacion del producto.</value>
        </member>
        <member name="P:Proyect.ProductOffer.Quantity">
            <summary>
            Obtiene un obtiene una instancia de clasificacion valida para un producto.
            </summary>
            <value>La cantidad del producto.</value>
        </member>
        <member name="P:Proyect.ProductOffer.Price">
            <summary>
            Obtiene un obtiene una instancia de clasificacion valida para un producto.
            </summary>
            <value>La price del producto.</value>
        </member>
        <member name="P:Proyect.ProductOffer.Ubication">
            <summary>
            Obtiene un obtiene una instancia de clasificacion valida para un producto.
            </summary>
            <value>La ubicacion del producto.</value>
        </member>
        <member name="M:Proyect.ProductOffer.#ctor(Proyect.Classification,System.Double,System.Double,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.ProductOffer"/>
            </summary>
            <param name="classification">Clasificacion del producto.</param>
            <param name="quantity">Cantidad del producto.</param>
            <param name="price">Precio del producto.</param>
            <param name="ubication">Ubicacion del producto.</param>
        </member>
        <member name="M:Proyect.ProductOffer.#ctor">
            <summary>
            Constructor para el json.
            </summary>
        </member>
        <member name="T:Proyect.PurchaseData">
            <summary>
            Clase para guardar la fecha y quien compró las ofertas (Por SRP), en defnitiva, la informacion de compra.
            Esta en una relacion de composicion con la clases IOffer, siendo est ala clase componente.
            </summary>
        </member>
        <member name="P:Proyect.PurchaseData.Buyer">
            <summary>
            El emprendedor que compro una oferta.
            </summary>
            <value>El comprador.</value>
        </member>
        <member name="P:Proyect.PurchaseData.PurchaseDate">
            <summary>
            Fecha de compra de la oferta.
            </summary>
            <value>La fecha de compra.</value>
        </member>
        <member name="M:Proyect.PurchaseData.#ctor(Proyect.Emprendedor)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.PurchaseData"/>
            </summary>
            <param name="buyer">El comprador de la oferta.</param>
        </member>
        <member name="T:Proyect.Qualifications">
            <summary>
            Clase que representa las habilitaciones de una oferta o emprendedor.
            </summary>
        </member>
        <member name="P:Proyect.Qualifications.QualificationName">
            <summary>
            Propiedad del nombre de la habilitacion.
            </summary>
            <value>La habiliatcion, el nombre en si.</value>
        </member>
        <member name="M:Proyect.Qualifications.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Qualifications"/>
            </summary>
            <param name="qualificationName">Nombre de la habilitacion.</param>
        </member>
        <member name="T:Proyect.Rubro">
            <summary>
            Clase que representa el rubro de una compania o emprendedor.
            </summary>
        </member>
        <member name="P:Proyect.Rubro.RubroName">
            <summary>
            Property del nombre del rubro.
            </summary>
            <value>El nombre del rubro.</value>
        </member>
        <member name="M:Proyect.Rubro.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Rubro"/>
            </summary>
            <param name="rubroName">Nombre del rubro.</param>
        </member>
        <member name="T:Proyect.TelegramAdapter">
            <summary>
            Adaptador de mensajes de Telegram a mensajes de la interfaz de usuario.
            Esto permite que la aplicacion sirva para otras apps apartes de telegram.
            </summary>
        </member>
        <member name="M:Proyect.TelegramAdapter.#ctor(Telegram.Bot.Types.Message,Telegram.Bot.TelegramBotClient)">
            <summary>
            Crea una nueva instancia de la clase <see cref="T:Proyect.TelegramAdapter"/>.
            </summary>
            <param name="message">El mensaje, en este caso es de telegram.</param>
            <param name="bot">El bot, en este caso de telegram.</param>
        </member>
        <member name="P:Proyect.TelegramAdapter.Text">
            <summary>
            El mensaje ingresado.
            </summary>
            <value>El texto del mensaje.</value>
        </member>
        <member name="P:Proyect.TelegramAdapter.Id">
            <summary>
            El id de usurio.
            </summary>
            <value>El id de usuario.</value>
        </member>
        <member name="P:Proyect.TelegramAdapter.MsgId">
            <summary>
            Identificador del chat.
            </summary>
            <value>El id del chat de telegram.</value>
        </member>
        <member name="M:Proyect.TelegramAdapter.SendProfileImage(System.String,System.String)">
            <summary>
            Metodo que se encarga de enviar una foto al chat de telegram (Su utiliza el patron adapter).
            </summary>
            <param name="mensaje">El mensaje que se ingresa para enviar con la foto.</param>
            <param name="direccion">La dirrecion de donde se sacara la foto.</param>
            <returns></returns>
        </member>
        <member name="T:Proyect.User">
            <summary>
            Superclase user de Emprendedor y Company (quienes estan en una relaciontaxonomica con esta clase).
            </summary>
        </member>
        <member name="F:Proyect.User.name">
            <summary>
            Nombre del usuario,sea una compania o emprendedor.
            </summary>
        </member>
        <member name="F:Proyect.User.ubication">
            <summary>
            Ubicacion del usiario
            </summary>
        </member>
        <member name="F:Proyect.User.rubro">
            <summary>
            El rubro al que pertenece el usuario.
            </summary>
        </member>
        <member name="F:Proyect.User.user_Id">
            <summary>
            Id del usuario, unico por cada uno.
            </summary>
        </member>
        <member name="F:Proyect.User.user_Contact">
            <summary>
            Contacto del usurario.
            </summary>
        </member>
        <member name="P:Proyect.User.OfertasConstantes">
            <summary>
            Lista de ofertas constantes, que posee el usuario (Usada en la seralizacion).
            Esta property solo se utiliza en la seralizacion.
            </summary>
            <returns>La lisat de ofertas consatnte de la compania.</returns>
        </member>
        <member name="P:Proyect.User.OfertasNoConstantes">
            <summary>
            Lista de ofertas no constantes, que posee el usuario (Usadas en la serializacion).
            </summary>
            <returns>La lista de ofertas no constantes.</returns>
        </member>
        <member name="M:Proyect.User.#ctor(System.String,System.String,System.String,Proyect.Rubro,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase user. <see cref="T:Proyect.User"/>
            </summary>
            <param name="name">Nombre del usuario.</param>
            <param name="ubication">Ubicacion del usuario.</param>
            <param name="rubro">Rubro del usuario.</param>
            <param name="user_Id">Rubro del usuario.</param>
            <param name="user_Contact">Rubro del usuario.</param>
        </member>
        <member name="M:Proyect.User.#ctor">
            <summary>
            Constructor para la seralizacion.
            </summary>
        </member>
        <member name="P:Proyect.User.Name">
            <summary>
            Propiedad get y set del atributo del nombre.
            </summary>
            <value>El nombre del usurio.</value>
        </member>
        <member name="P:Proyect.User.Ubication">
            <summary>
            Propiedad get y set del atributo de la ubicacion.
            </summary>
            <value>La ubicacion del usurio.</value>
        </member>
        <member name="P:Proyect.User.Rubro">
            <summary>
            Propiedad get y set del atributo del rubro.
            </summary>
            <value>El rubro al que pertenece el usurio.</value>
        </member>
        <member name="P:Proyect.User.User_Id">
            <summary>
            Obtiene el id del usuario.
            </summary>
            <value>La id del usuario.</value>
        </member>
        <member name="P:Proyect.User.User_Contact">
            <summary>
            Obtiene el contacto del usuario.
            </summary>
            <value>El contacto del usurio.</value>
        </member>
    </members>
</doc>
