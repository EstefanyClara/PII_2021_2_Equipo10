<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PIILibrary</name>
    </assembly>
    <members>
        <member name="T:Proyect.Administrator">
            <summary>
            Esta clase administrador invita a los usuarios a registarse.
            Clase singleton, solo una instancia de administrador. 
            </summary>
        </member>
        <member name="P:Proyect.Administrator.Instance">
            <summary>
            Obtiene la instancia de administrador.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.Administrator.Tokens">
            <summary>
            Obteien la lista de tokes que el administardo coloca.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.Administrator.Invite(System.String,System.String,System.String,System.String,Proyect.Rubro)">
            <summary>
            Metodo que crea una compania si la misma ingreso un token correcto (Utiliza Creator).
            </summary>
            <param name="companyToken"></param>
            <param name="name"></param>
            <param name="ubication"></param>
            <param name="rubro"></param>
            <param name="user_Id"></param>
            <returns></returns>
        </member>
        <member name="T:Proyect.APILocationContainer">
            <summary>
            Contenedor de la instancia de la api de localizacion (clase singleton, solo hay una instancia).
            </summary>
        </member>
        <member name="P:Proyect.APILocationContainer.Instance">
            <summary>
            Obtiene la instancia de la instancia del contenedor de la api.
            </summary>
            <value>_instance</value>
        </member>
        <member name="P:Proyect.APILocationContainer.APIdeLocalizacion">
            <summary>
            Obtiene la instancia de la api de localizacion.
            </summary>
            <value>this.client</value>
        </member>
        <member name="T:Proyect.AppLogic">
            <summary>
            Clase singleton para guardar los datos de la Aplicacion.
            Solo hay una instancia de esta clase, y es la que colabora con todas las demas.
            Esta clase, ademas guarda las instancias tanto de campanias y de emprendedores (La usa de manera cercana).
            </summary>
        </member>
        <member name="P:Proyect.AppLogic.Companies">
            <summary>
            Obtiene las companias que estan registradas.
            </summary>
            <value>companies.</value>
        </member>
        <member name="P:Proyect.AppLogic.Entrepreneurs">
            <summary>
            Obtiene los emprendedores que estan registrados.
            </summary>
            <value>entrepreneurs.</value>
        </member>
        <member name="P:Proyect.AppLogic.Rubros">
            <summary>
            Obtiene los rubros habilitados.
            </summary>
            <value>validRubros.</value>
        </member>
        <member name="P:Proyect.AppLogic.Qualifications">
            <summary>
            Obtiene la lista de habilitaciones registradas.
            </summary>
            <value>validQualifications.</value>
        </member>
        <member name="P:Proyect.AppLogic.Classifications">
            <summary>
            Obtiene la lista de clasificaciones/categorias registradas para los productos.
            </summary>
            <value>validClasification.</value>
        </member>
        <member name="P:Proyect.AppLogic.Instance">
            <summary>
            Obtiene la instancia de AppLogic.
            </summary>
            <value>_instance.</value>
        </member>
        <member name="M:Proyect.AppLogic.RegisterEntrepreneurs(System.String,System.String,System.String,Proyect.Rubro,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Emprendedor"/>.
            Utiliza el patron creator.
            </summary>
            <param name="name">El nombre del emprendedor.</param>
            <param name="ubication">La ubicacion del emprendedor.</param>
            <param name="rubro">El rubro del emprendedor.</param>
            <param name="habilitaciones">Las habilitaciones que tiene el emprendedor.</param>
            <param name="especializaciones">Las especializaciones que tiene el emprendedor.</param>
            <param name="user_Id">Id que tiene el emprendedor.</param> 
        </member>
        <member name="M:Proyect.AppLogic.RegistrarCompany(System.String,System.String,System.String,System.String,Proyect.Rubro)">
            <summary>
            Registra a una compania
            </summary>
            <param name="companyToken"></param>
            <param name="user_Id"></param>
            <param name="name"></param>
            <param name="ubication"></param>
            <param name="rubro"></param>
            <returns>mensaje de confirmacion</returns>
        </member>
        <member name="M:Proyect.AppLogic.RemoveKeyWords(Proyect.Company,Proyect.IOffer,System.Int32)">
            <summary>
            Remueve palabras clave de la oferta de una compania.
            Le delega la responsabilidad a company (La experta).
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="keyWordIndex">La palabra clave.</param>
        </member>
        <member name="M:Proyect.AppLogic.AddKeyWords(Proyect.Company,Proyect.IOffer,System.String)">
            <summary>
            Agrega las palabras clave de una oferta.
            Le delaga la responsabilidad a Company (La epxerta).
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="keyWord">La palabra clave.</param>
        </member>
        <member name="M:Proyect.AppLogic.RemoveOffer(Proyect.Company,System.Int32)">
            <summary>
            Remueve la oferta de una compania.
            Le delega la responsabilidad a company (La experta).
            </summary>
            <param name="company">La compania.</param>
            <param name="offerIndex">La oferta.</param>
        </member>
        <member name="M:Proyect.AppLogic.RemoveQualification(Proyect.Company,Proyect.IOffer,Proyect.Qualifications)">
            <summary>
            Remueve las habilitaciones de una compania. 
            Le delega la responsabilidad a compani (La experta).
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="qualification">La habilitacion.</param>
        </member>
        <member name="M:Proyect.AppLogic.AddQualification(Proyect.Company,Proyect.IOffer,Proyect.Qualifications)">
            <summary>
            Agrega habilitaciones a una oferta.
            Le delega la responsabilidad a company (La experta)
            </summary>
            <param name="company">La compania.</param>
            <param name="offer">La oferta.</param>
            <param name="qualification">La habilitacion.</param>
        </member>
        <member name="M:Proyect.AppLogic.PublicConstantOffer(Proyect.Company,Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Publica una constante oferta de la compania que se le ingresa.
            Ã‘Le delaga la responsabilidad a company (Por patron creator).
            </summary>
            <param name="company">La compania.</param>
            <param name="tipo">La clasificacion.</param>
            <param name="quantity">La cantidad.</param>
            <param name="cost">El precio.</param>
            <param name="ubication">La ubicacion.</param>
            <param name="qualifications">Las hablitaciones.</param>
            <param name="keyWords">La palabra clave.</param>
        </member>
        <member name="M:Proyect.AppLogic.PublicNonConstantOffer(Proyect.Company,Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Publica una oferta no constnte de la compania que se le ingresa.
            Le delega la responsabilidad a company (Por patron creator).
            </summary>
            <param name="company">La compania.</param>
            <param name="tipo">La clasificacion.</param>
            <param name="quantity">La cantidad.</param>
            <param name="cost">El precio.</param>
            <param name="ubication">La ubicacion.</param>
            <param name="qualifications">Las hablitaciones.</param>
            <param name="keyWords">La palabra clave.</param>
            <returns>mensaje de confirmacion</returns>
        </member>
        <member name="M:Proyect.AppLogic.SearchOfferByType(System.String)">
            <summary>
            Metodo que se encarga de buscar las ofertas por tipo.
            Le delega la responsabilidada a OfferSearch (Por SRP).
            </summary>
            <param name="word">Tipo de oferta.</param>
            <returns>Un ArrayList con todas las ofertas que sean de ese tipo.</returns>
        </member>
        <member name="M:Proyect.AppLogic.SearchOfferByUbication(System.String)">
            <summary>
            Metodo que se encarga de buscar las ofertas por ubicacion.
            Le delega la responsabilidada a OfferSearch (Por SRP).
            </summary>
            <param name="word">Ubicacion de la oferta.</param>
            <returns>Un ArrayList con todas las ofertas en la ubicacion dada.</returns>
        </member>
        <member name="M:Proyect.AppLogic.SearchOfferByKeywords(System.String)">
            <summary>
            Metodo que se encarga de buscar las ofertas por palabra clave.
            Le delega la responsabilidada a OfferSearch (Por SRP).
            </summary>
            <param name="keyWord"></param>
            <returns></returns>
        </member>
        <member name="M:Proyect.AppLogic.AccepOffer(Proyect.Emprendedor,Proyect.IOffer)">
            <summary>
            Metodo para aceptar una oferta.
            Como app logic es la que conoce todos los datos para habilitar la operacion, teien eesta responsabilidad.
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <param name="offer">Oferta a aceptar.</param>
        </member>
        <member name="M:Proyect.AppLogic.ObteinOfferDistance(Proyect.Emprendedor,Proyect.IOffer)">
            <summary>
            Metodo que permite obtener la distancia entre un emprendedor y un producto.
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <param name="offer">La Oferta.</param>
        </member>
        <member name="M:Proyect.AppLogic.ObteinOfferMap(Proyect.IOffer)">
            <summary>
            Metodo que obtiene el mapa de la ubicacion de una oferta.
            </summary>
            <param name="offer">Oferta que se quiere buscar.</param>
            <returns>Un mapa de la ubicacion de la oferta.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetConstantMaterials">
            <summary>
            Metodo que devuelve un string con la lista de materiales constantes.
            Por expert tiene esta responsabilidad.
            </summary>
            <returns>Un string con aquellos materiales que son recuerrentes.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetOffersAccepted(Proyect.Company)">
            <summary>
            Obtiene un string con la indicando si sus ofertas fueron o no fueron aceptadas, en caso de que si, indica ademas la fecha de cuando fueron aceptadas.
            Le delega la responsabilidad a Company (La experta).
            </summary>
            <param name="company">La compania.</param>
            <returns>Un string con las ofertas que fueron aceptadas.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetOffersAccepted(Proyect.Emprendedor)">
            <summary>
            Obtiene las ofertas aceptadas por el emprendedor, junto con la fecha de cuando las acepto.
            Le delega la responsabilidad a emprendedor, la experta.
            Es una operacion polimorfica.
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <returns>Un string con las ofertas que fueron aceptadas.</returns>
        </member>
        <member name="M:Proyect.AppLogic.GetPeriodTimeOffersAccepted(Proyect.Company,System.Int32)">
            <summary>
            Obtiene la cantidad de ofertas que fueron aceptadas en un periodo de tiempo establecido por el usuario.
            Le delega la responsabilidad a company (La experta).
            Es una operacion polimorfica.
            </summary>
            <param name="company">Compania.</param>
            <param name="periodTime">Periodo de tiempo establecido por el usuario.</param>
            <returns></returns>
        </member>
        <member name="M:Proyect.AppLogic.GetPeriodTimeOffersAccepted(Proyect.Emprendedor,System.Int32)">
            <summary>
            Obtiene la cantidad de ofertas que fueron aceptadas en un periodo de tiempo establecido por el usuario.
            Le delega la responasabilidad a emprendedor (La experta).
            Es una operaciion polimorfica.
            </summary>
            <param name="emprendedor">Emprendedor.</param>
            <param name="periodTime">Periodo de tiempo establecido por el usuario.</param>
            <returns></returns>
        </member>
        <member name="M:Proyect.AppLogic.GetCompany(System.String)">
            <summary>
            Obtiene la compania mediente el id de usuraui ingreado.
            </summary>
            <param name="user_Id"></param>
            <returns></returns>
        </member>
        <member name="M:Proyect.AppLogic.GetEmprendedor(System.String)">
            <summary>
            Obtiene el emprendedor mendiante el ingreso de un id de usuario.
            </summary>
            <param name="user_Id"></param>
            <returns></returns>
        </member>
        <member name="T:Proyect.Classification">
            <summary>
            Esta clase representa una clasificacion para un producto.
            </summary>
        </member>
        <member name="P:Proyect.Classification.Category">
            <summary>
            Obtiene el valor de una clasificacion para un Producto.
            </summary>
            <value>this.category</value>
        </member>
        <member name="M:Proyect.Classification.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Classification"/>.
            </summary>
            <param name="category">Categoria de clasificaciÃ³n.</param>
        </member>
        <member name="T:Proyect.Company">
            <summary>
            Esta clase representa la compania y hereda de user (cumple con el principio ISP, porque no depende de tipos que no usa, ya que utiliza todos los metodos y propiedades de user).
            </summary>
        </member>
        <member name="F:Proyect.Company.offers">
            <summary>
            Lista de ofertas de la compania.
            </summary>
        </member>
        <member name="M:Proyect.Company.#ctor(System.String,System.String,System.String,Proyect.Rubro)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Company"/>.
            </summary>
            <param name="name">Nombre compania.</param>
            <param name="ubication">Ubicacion de la compania.</param>
            <param name="rubro">Rubro de la compania.</param>
            <param name="user_Id">Identificacion de la compania.</param>
        </member>
        <member name="P:Proyect.Company.OffersPublished">
            <summary>
            Metodo que retorna una lista con las ofertas publicadas por la empresa.
            </summary>
            <value>this.offers</value>
        </member>
        <member name="M:Proyect.Company.PublicConstantOffer(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Crea una instancia de una oferta constante y se la agrega a la lisat de ofertas de la compania.
            Se Asigno esta responsabilidad por expert (La clase company es la que conoce la lista de ls ofertas que publica).
            Tambien, se asigno esta reponsabilidad siguinedo el patron creator, company contiene objetos IOffer
            </summary>
            <param name="tipo"></param>
            <param name="quantity"></param>
            <param name="cost"></param>
            <param name="ubication"></param>
            <param name="qualifications"></param>
            <param name="keyWords"></param>
        </member>
        <member name="M:Proyect.Company.PublicNonConstantOffer(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Crea una instacion de una oferta no constante y se la agrega a la lista de ofertas de la compania.
            Se Asigno esta responsabilidad por expert (La clase company es la que conoce la lista de ls ofertas que publica).
            Tambien, se asigno esta reponsabilidad siguinedo el patron creator, company contiene objetos IOffer.
            </summary>
            <param name="tipo"></param>
            <param name="quantity"></param>
            <param name="cost"></param>
            <param name="ubication"></param>
            <param name="qualifications"></param>
            <param name="keyWords"></param>
        </member>
        <member name="M:Proyect.Company.GetOffersAccepted">
            <summary>
            Obtiene un string con todas las ofertas que fueron o no fueron aceptadas por emprendedores(por expert le asignamos esta responsabilidad).
            Es una operacion polimorfica.
            </summary>
            <returns>Las ofertas aceptadas.</returns>
        </member>
        <member name="M:Proyect.Company.GetOffersAccepted(System.Int32)">
            <summary>
            Obtiene la cantidad de ofertas que publico la compania, que fueron aceptadas en un periodo de tiempo (Por expert).
            Es una operwacion polimorfica.
            </summary>
            <param name="periodTime">Periodo de tiempo.</param>
            <returns>Las ofertas aceptadas en un periodo de tiempo.</returns>
        </member>
        <member name="M:Proyect.Company.RemoveKeyWords(Proyect.IOffer,System.Int32)">
            <summary>
            Remueve palabras clave de una oferta (Por expert).
            </summary>
            <param name="offer">La oferta.</param>
            <param name="keyWordIndex">La palabra clave de la oferta.</param>
        </member>
        <member name="M:Proyect.Company.AddKeyWords(Proyect.IOffer,System.String)">
            <summary>
            Agrega palabras clave a una oferta (Por expert).
            </summary>
            <param name="offer">La oferta.</param>
            <param name="keyWord">La palabra clave de la oferta.</param>
        </member>
        <member name="M:Proyect.Company.AddQualification(Proyect.IOffer,Proyect.Qualifications)">
            <summary>
            Agrega habilitaciones a la oferta (Por expert).
            </summary>
            <param name="offer">La oferta.</param>
            <param name="qualification">La habilitaciones de la oferta.</param>
        </member>
        <member name="M:Proyect.Company.RemoveQualification(Proyect.IOffer,Proyect.Qualifications)">
            <summary>
            Remueve la habilitacion de una oferta (Por expert).
            </summary>
            <param name="offer">La oferta.</param>
            <param name="qualification">La habilitacion de la oferta.</param>
        </member>
        <member name="T:Proyect.ConstantOffer">
            <summary>
            Representa las ofertas constantes de las companias (Es del tipo IOffer, a quien usa, por lo que cumple con ISP).
            </summary>
        </member>
        <member name="M:Proyect.ConstantOffer.#ctor(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.ConstantOffer"/>
            </summary>
            <param name="tipo"></param>
            <param name="quantity"></param>
            <param name="cost"></param>
            <param name="ubicacion"></param>
            <param name="qualifications"></param>
            <param name="keyWords"></param>
        </member>
        <member name="P:Proyect.ConstantOffer.Product">
            <summary>
            Obtiene el producto de una oferta.
            </summary>
            <value>this.product</value>
        </member>
        <member name="P:Proyect.ConstantOffer.Qualifications">
            <summary>
            Obtiene la lista de las habilitaciones de una oferta.
            </summary>
            <value>this.qualifications</value>
        </member>
        <member name="P:Proyect.ConstantOffer.KeyWords">
            <summary>
            Obtiene la lista de palbras clave de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.ConstantOffer.PurchesedData">
            <summary>
            Obtiene la informacion de el o los compardores de esta oferta constante.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.ConstantOffer.DatePublished">
            <summary>
            Obtiene la fecha de publicacion de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.ConstantOffer.GetPeriodTimeOffersAcceptedData(System.Int32)">
            <summary>
            Obtiene la informacion de compra del ultimo emprendedor que acepta la oferta (Patron expert).
            </summary>
            <param name="periodTime"></param>
            <returns>Mensaje con la infromacion de compra de la oferta, si la misma entra dentro del rango estipulado, en caso contrario, mensaje que indica dicha situacion.</returns>
        </member>
        <member name="M:Proyect.ConstantOffer.GetOfferBuyerTimeData(Proyect.Emprendedor)">
            <summary>
            Obtiene la fecha de compra del emprendedor ingresado (Patron expert).
            </summary>
            <param name="emprendedor"></param>
            <returns> La fecha de compra del emprendedor ingresado</returns>
        </member>
        <member name="M:Proyect.ConstantOffer.PutBuyer(Proyect.Emprendedor)">
            <summary>
            Agrega un nuevo comprador a la lista de compradores de esta oferta constante (Se utiliza creator, y expert).
            </summary>
            <param name="emprendedor"></param>
        </member>
        <member name="T:Proyect.Emprendedor">
            <summary>
            Esta clase representa un Emprendedor, hereda de user (Tienen relaciontaxonomica). 
            </summary>
        </member>
        <member name="M:Proyect.Emprendedor.#ctor(System.String,System.String,System.String,Proyect.Rubro,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Emprendedor"/>
            </summary>
            <param name="name">Nombre del emprendedor.</param>
            <param name="ubication">Ubicacion del emprendedor.</param>
            <param name="rubro">Rubro del emprendedor.</param>
            <param name="qualifications">Hablitaciones del emprendedor.</param>
            <param name="specializations">Especializaciones del emprendedor.</param>
            <param name="user_Id">Identificacion del emprendedor.</param>
        </member>
        <member name="P:Proyect.Emprendedor.Qualifications">
            <summary>
            Propiedad get y set de las habilitaciones.
            </summary>
            <value>this.qualifications</value>
        </member>
        <member name="P:Proyect.Emprendedor.Specializations">
            <summary>
            Propiedad Specializations.
            </summary>
            <value>this.specializations</value>
        </member>
        <member name="P:Proyect.Emprendedor.PurchasedOffers">
            <summary>
            Obtiene la lista de ofertas ofertas aceptadas por el emprendedor.
            </summary>
            <value>this.purchasedOffer</value>
        </member>
        <member name="M:Proyect.Emprendedor.AddPurchasedOffer(Proyect.IOffer)">
            <summary>
            Metodo para agregar una oferta a la lista de ofertas que el emprendedor acepto (Por expert).
            </summary>
            <param name="offer"></param>
        </member>
        <member name="M:Proyect.Emprendedor.GetOffersAccepted(System.Int32)">
            <summary>
            Obtiene la cantidad de ofertas que fueron aceptadas en un periodo de tiempo (Expert).
            Es una operacion polimorfica.
            </summary>
            <param name="periodTime">Periodo de tiempo.</param>
            <returns>message</returns>
        </member>
        <member name="T:Proyect.EmptyUserBuilderException">
            <summary>
            Excepcion para cuando el usurio ingresa un dato vacio cuando se registra
            </summary>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor">
            <summary>
            Constructor vacio
            </summary>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor(System.String)">
            <summary>
            Constructor con mensaje.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor(System.String,System.Exception)">
            <summary>
            Construtor con mensaje y excepcion encadenada.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <returns></returns>
        </member>
        <member name="M:Proyect.EmptyUserBuilderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor con atributo serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Proyect.AutorizationHandler">
            <summary>
            Clase base para implementar el patrÃ³n Chain of Responsibility.
            </summary>
        </member>
        <member name="M:Proyect.AutorizationHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.AutorizationHandler"/>. Esta clase procesa si la perosna que envio el mensaje esta registrada.
            </summary>
            <param name="next">El prÃ³ximo "handler".</param>
        </member>
        <member name="M:Proyect.AutorizationHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/registrar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.BaseHandler">
            <summary>
            Clase base para implementar el patrÃ³n Chain of Responsibility.
            </summary>
        </member>
        <member name="P:Proyect.BaseHandler.Next">
            <summary>
            Obtiene el prÃ³ximo "handler".
            </summary>
            <value>El "handler" que serÃ¡ invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:Proyect.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:Proyect.BaseHandler.#ctor(Proyect.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.BaseHandler"/>.
            </summary>
            <param name="next">El prÃ³ximo "handler".</param>
        </member>
        <member name="M:Proyect.BaseHandler.#ctor(System.String[],Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El prÃ³ximo "handler".</param>
        </member>
        <member name="M:Proyect.BaseHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Este mÃ©todo debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="responder">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:Proyect.BaseHandler.InternalCancel">
            <summary>
            Este mÃ©todo puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este mÃ©todo para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Proyect.BaseHandler.CanHandle(Proyect.IMessage)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:Proyect.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayÃºsculas y minÃºsculas. Las
            clases sucesores pueden sobreescribir este mÃ©todo para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:Proyect.BaseHandler.Handle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesÃ³ el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Proyect.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este mÃ©todo para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:Proyect.CancelHandler">
            <summary>
            Clase base para implementar el patrÃ³n Chain of Responsibility.
            </summary>
        </member>
        <member name="M:Proyect.CancelHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.AutorizationHandler"/>. Esta clase procesa si la perosna que envio el mensaje esta registrada.
            </summary>
            <param name="next">El prÃ³ximo "handler".</param>
        </member>
        <member name="M:Proyect.CancelHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/registrar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.CompanyMyOfferHandler">
            <summary>
            Clase base para implementar el patrÃ³n Chain of Responsibility.
            </summary>
        </member>
        <member name="M:Proyect.CompanyMyOfferHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.CompanyMyOfferHandler"/>. Esta clase elimina la oferta publicada de una compania.
            </summary>
            <param name="next">El prÃ³ximo "handler".</param>
        </member>
        <member name="M:Proyect.CompanyMyOfferHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/registrar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.DataUserContainer">
            <summary>
            Clase contenedora del historia de mensajes que un usuario manda
            </summary>
        </member>
        <member name="P:Proyect.DataUserContainer.Instance">
            <summary>
            Obtiene la instancia de la clase.
            </summary>
            <value>La instancia de la clase.</value>
        </member>
        <member name="P:Proyect.DataUserContainer.UserDataHistory">
            <summary>
            Obtiene el diccionario donde se guardan los mensajes de un usuario.
            </summary>
            <value>Diccionario con clave el chat ID de un usuario, y lista de la histroia de usuario.</value>
        </member>
        <member name="T:Proyect.GetConstantMaterialsHandler">
            <summary>
            Clase base para implementar el patrÃ³n Chain of Responsibility.
            </summary>
        </member>
        <member name="M:Proyect.GetConstantMaterialsHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.GetConstantMaterialsHandler"/>. Esta clase procesa si la perosna que envio el mensaje esta registrada.
            </summary>
            <param name="next">El prÃ³ximo "handler".</param>
        </member>
        <member name="M:Proyect.GetConstantMaterialsHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/registrar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Proyect.IHandler" -->
        <member name="P:Proyect.IHandler.Next">
            <summary>
            Obtiene el prÃ³ximo "handler".
            </summary>
            <value>El "handler" que serÃ¡ invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Proyect.IHandler.Handle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesÃ³ el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Proyect.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el prÃ³ximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Proyect.PublicOfferHandler">
            <summary>
            Clase base para implementar el patrÃ³n Chain of Responsibility.
            </summary>
        </member>
        <member name="M:Proyect.PublicOfferHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.PublicOfferHandler"/>. Esta clase procesa el mensaje public, para publicar una oferta.
            </summary>
            <param name="next">El prÃ³ximo "handler".</param>
        </member>
        <member name="M:Proyect.PublicOfferHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/registrar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.RegisterHandler">
            <summary>
            Clase base para implementar el patrÃ³n Chain of Responsibility.
            </summary>
        </member>
        <member name="M:Proyect.RegisterHandler.#ctor(Proyect.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.RegisterHandler"/>. Esta clase procesa el mensaje "/Registrar" de un usuario.
            </summary>
            <param name="next">El prÃ³ximo "handler".</param>
        </member>
        <member name="M:Proyect.RegisterHandler.InternalHandle(Proyect.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/registrar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyect.IMessage">
            <summary>
            Interfaz para los mensajes.
            </summary>
        </member>
        <member name="P:Proyect.IMessage.Id">
            <summary>
            Id del usuario.
            </summary>
        </member>
        <member name="P:Proyect.IMessage.Text">
            <summary>
            El mensaje.
            </summary>
        </member>
        <member name="P:Proyect.IMessage.MsgId">
            <summary>
            Id del chat.
            </summary>
            <value></value>
        </member>
        <member name="T:Proyect.IOffer">
            <summary>
            Interfaz para las ofertas de una compania.
            </summary>
        </member>
        <member name="P:Proyect.IOffer.Product">
            <summary>
            Obtiene el producto de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.IOffer.Qualifications">
            <summary>
            Obtiene las habilitaciones de la oferta.
            </summary>
            <value>qualifications</value>
        </member>
        <member name="P:Proyect.IOffer.KeyWords">
            <summary>
            Obtiene la lista de palabras clave de una oferta.
            </summary>
            <value>keyWords</value>
        </member>
        <member name="P:Proyect.IOffer.DatePublished">
            <summary>
            Obtiene la fecha de publicacion de la oferta.
            </summary>
            <value>DateTime</value>
        </member>
        <member name="M:Proyect.IOffer.GetPeriodTimeOffersAcceptedData(System.Int32)">
            <summary>
            Obtien todas las ofertas que le fueron aceptadas en un periodo de tiempo.
            </summary>
            <param name="periodTime"></param>
            <returns>mensaje con la informacion de compra de sus ofertas</returns>
        </member>
        <member name="M:Proyect.IOffer.GetOfferBuyerTimeData(Proyect.Emprendedor)">
            <summary>
            Obtiene la fecha en la que el imprendedor ingresado acepto la oferta.
            </summary>
            <param name="emprendedor"></param>
        </member>
        <member name="M:Proyect.IOffer.PutBuyer(Proyect.Emprendedor)">
            <summary>
            Le asigna el emprendedor y la fecha de compra a la oferta, una vez es comprada.
            </summary>
            <param name="emprendedor"></param>
        </member>
        <member name="T:Proyect.NonConstantOffer">
            <summary>
            Esta clase representa las ofertas constantes de las companias (Cumple con ISP).
            </summary>
        </member>
        <member name="M:Proyect.NonConstantOffer.#ctor(Proyect.Classification,System.Double,System.Double,System.String,System.Collections.Generic.List{Proyect.Qualifications},System.Collections.ArrayList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.NonConstantOffer"/>
            </summary>
            <param name="tipo"></param>
            <param name="quantity"></param>
            <param name="cost"></param>
            <param name="ubicacion"></param>
            <param name="qualifications"></param>
            <param name="keyWords"></param>
        </member>
        <member name="P:Proyect.NonConstantOffer.Product">
            <summary>
            Obtiene el producto de una oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.NonConstantOffer.Qualifications">
            <summary>
            Obtiene la lista de las habilitaciones de una oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.NonConstantOffer.KeyWords">
            <summary>
            Obtiene la lista de palbras clave de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.NonConstantOffer.PurchesedData">
            <summary>
            Obtiene la informacion de el o los compardores de esta oferta constante.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.NonConstantOffer.DatePublished">
            <summary>
            Obtiene la fecha de publicacion de la oferta.
            </summary>
            <value>dateTime</value>
        </member>
        <member name="M:Proyect.NonConstantOffer.GetPeriodTimeOffersAcceptedData(System.Int32)">
            <summary>
            Obtiene la informacion de compra de la oferta (expert).
            </summary>
            <param name="periodTime"></param>
            <returns>si la oferta se compro antes de la fecha estipulada, devuelve la iformacion de compra, en caso contrario, devuelve un striing indicando dicha situacion</returns>
        </member>
        <member name="M:Proyect.NonConstantOffer.GetOfferBuyerTimeData(Proyect.Emprendedor)">
            <summary>
            Obtiene la fecha de compra del emprendedor ingresado.
            </summary>
            <param name="emprendedor"></param>
            <returns>retorna la fecha de cmpra de la oferta</returns>
        </member>
        <member name="M:Proyect.NonConstantOffer.PutBuyer(Proyect.Emprendedor)">
            <summary>
            Coloca el emprendedor y la fecha de compra, en la informacion de compra.
            </summary>
            <param name="emprendedor"></param>
        </member>
        <member name="T:Proyect.OfferSearch">
            <summary>
            Clase que se encarga de buscar las ofertas por los distintos metodos establecidos (Por SRP).
            Es una clase singleton (solo hay una instancia de la misma).
            </summary>
        </member>
        <member name="P:Proyect.OfferSearch.Instance">
            <summary>
            Obtiene la instancia de OfferSearch.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByKeywords(System.String)">
            <summary>
            Busca las ofertas con la palabra clave que se le pasa.
            </summary>
            <param name="word">Palabras claves de oferta.</param>
            <returns>una lista con las offertas</returns>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByUbication(System.String)">
            <summary>
            Busca ofertas por ubicacion.
            </summary>
            <param name="ubication">Ubicacion de oferta.</param>
            <returns>una lista con las offertas</returns>
        </member>
        <member name="M:Proyect.OfferSearch.SearchByType(System.String)">
            <summary>
            Busca ofertas por el tipo.
            </summary>
            <param name="type">Tipo de oferta.</param>
            <returns>una lista con las offertas</returns>
        </member>
        <member name="T:Proyect.ProductOffer">
            <summary>
            Representa el producto de una oferta (Esta en una relacion de composicion con la clase Offer, siendo product la clase compuesta).
            </summary>
        </member>
        <member name="P:Proyect.ProductOffer.Classification">
            <summary>
            Obtiene un obtiene una instancia de clasificacion valida para un producto.
            </summary>
        </member>
        <member name="P:Proyect.ProductOffer.Quantity">
            <summary>
            Determina la cantidad de unidades de un producto.
            </summary>
        </member>
        <member name="P:Proyect.ProductOffer.Price">
            <summary>
            Determina el precio por unidad de producto.
            </summary>
        </member>
        <member name="P:Proyect.ProductOffer.Ubication">
            <summary>
            Determina la ubicacion de un producto.
            </summary>
        </member>
        <member name="M:Proyect.ProductOffer.#ctor(Proyect.Classification,System.Double,System.Double,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.ProductOffer"/>
            </summary>
            <param name="classification">Clasificacion del producto.</param>
            <param name="quantity">Cantidad del producto.</param>
            <param name="price">Precio del producto.</param>
            <param name="ubication">Ubicacion del producto.</param>
        </member>
        <member name="T:Proyect.PurchaseData">
            <summary>
            Clase para guardar la fecha y quien comprÃ³ las ofertas (Por SRP).
            </summary>
        </member>
        <member name="P:Proyect.PurchaseData.Buyer">
            <summary>
            Metodo get del comprador.
            </summary>
        </member>
        <member name="P:Proyect.PurchaseData.PurchaseDate">
            <summary>
            Metodo get de la fecha de compra.
            </summary>
        </member>
        <member name="M:Proyect.PurchaseData.#ctor(Proyect.Emprendedor)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.PurchaseData"/>
            </summary>
            <param name="buyer"></param>
        </member>
        <member name="T:Proyect.Qualifications">
            <summary>
            Clase que representa las habilitaciones de una oferta o emprendedor.
            </summary>
        </member>
        <member name="P:Proyect.Qualifications.QualificationName">
            <summary>
            Propiedad del nombre de la habilitacion.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.Qualifications.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Qualifications"/>
            </summary>
            <param name="qualificationName">Nombre de las habilitaciones.</param>
        </member>
        <member name="T:Proyect.Rubro">
            <summary>
            Clase que representa el rubro de una compania o emprendedor.
            </summary>
        </member>
        <member name="P:Proyect.Rubro.RubroName">
            <summary>
            Propierty del nombre del rubro.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyect.Rubro.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.Rubro"/>
            </summary>
            <param name="rubroName">Nombre del rubro.</param>
        </member>
        <member name="T:Proyect.TelegramAdapter">
            <summary>
            Adaptador de mensajes de Telegram a mensajes de la interfaz de usuario.
            </summary>
        </member>
        <member name="M:Proyect.TelegramAdapter.#ctor(Telegram.Bot.Types.Message)">
            <summary>
            Crea una nueva instancia de la clase <see cref="T:Proyect.TelegramAdapter"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Proyect.TelegramAdapter.Text">
            <summary>
            El mensaje recibido.
            </summary>
        </member>
        <member name="P:Proyect.TelegramAdapter.Id">
            <summary>
            Identificador del usuario que enviÃ³ el mensaje.
            </summary>
        </member>
        <member name="P:Proyect.TelegramAdapter.MsgId">
            <summary>
            Identificador del chat.
            </summary>
            <value></value>
        </member>
        <member name="T:Proyect.User">
            <summary>
            Superclase user de Emprendedor y Company (quienes estan en una relaciontaxonomica con esta clase).
            </summary>
        </member>
        <member name="F:Proyect.User.name">
            <summary>
            Nombre del usuario,sea una compania o emprendedor.
            </summary>
        </member>
        <member name="F:Proyect.User.ubication">
            <summary>
            Ubicacion del usiario
            </summary>
        </member>
        <member name="F:Proyect.User.rubro">
            <summary>
            El rubro al que pertnece el usuario.
            </summary>
        </member>
        <member name="F:Proyect.User.user_Id">
            <summary>
            Id del usuario, unico por cada uno.
            </summary>
        </member>
        <member name="M:Proyect.User.#ctor(System.String,System.String,System.String,Proyect.Rubro)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyect.User"/>
            </summary>
            <param name="name">Nombre del usuario.</param>
            <param name="ubication">Ubicacion del usuario.</param>
            <param name="rubro">Rubro del usuario.</param>
            <param name="user_Id">Rubro del usuario.</param>
        </member>
        <member name="P:Proyect.User.Name">
            <summary>
            Propiedad get y set del atributo del nombre.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.User.Ubication">
            <summary>
            Propiedad get y set del atributo de la ubicacion.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.User.Rubro">
            <summary>
            Propiedad get y set del atributo del rubro.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyect.User.User_Id">
            <summary>
            Obtiene el id del usuario.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
